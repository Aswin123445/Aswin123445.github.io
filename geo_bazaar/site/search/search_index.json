{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Geo Bazaar Application Documentation Introduction Geo Bazaar is an innovative e-commerce platform built using Python Django with PostgreSQL as its database. The project aims to provide a unique shopping experience by specializing in location-specific products that are not typically available outside their regions of origin. These products often carry a rich cultural, traditional, or artisanal value , offering users the opportunity to explore and purchase items that reflect the essence of different places. With Geo Bazaar, buyers can: - Connect with the uniqueness of diverse locations. - Support local artisans. - Help preserve cultural heritage. This platform aspires to bridge the gap between local sellers and global buyers in a seamless and accessible manner. Table of Contents Overview Key Features Technologies Used Future Enhancements Overview Modules(user) 1. User Management 2. Profile Management 3. Home Section 4. Product Listing 5. Product Details 6. Cart 7. Wishlist 8. Payment 9. User To Seller Modules(admin) 1. Audhentication 2. Admin User Management 3. Product Management 4. Order Management> 5. Analytics and Reporting 6. Manage Delivary Partener 7. Manage Delivary Partener Modules(Delivary Partner) 1. Audhentication 2. Product Management Key Features Location Specific Products : Dedicated platform to buy historical, cultural, traditional products Search and Filter : Buyers can search for products by category, region, or name. Secure Payments : Integration of a secure payment gateway for transactions. User Management : Separate dashboards for buyers and delivary partnerers. Order Tracking : Buyers can track their orders in real-time. Product Reviews : Customers can leave reviews for purchased items. Customer To Seller : Customers can apply for selling their unique products. Admin Validations : Admin can verify the products relevancy in the region and the history Technologies Used Backend : Python and Django Database : PostgreSQL Frontend : HTML, CSS, JavaScript APIs : Payment gateway and geolocation services Version Control : Git and GitHub Future Enhancements 1. Integration of Additional Delivery Partners In the future, we plan to add multiple delivery partners to improve the efficiency and flexibility of product deliveries to customers. By integrating various delivery services, customers will have more options to choose from, ensuring timely and cost-effective deliveries. 2. Product Validity Verification Additionally, we aim to incorporate a system where the delivery partners will verify the validity of the product before shipping it to the customer. This will ensure that the product is in proper condition and meets all the necessary standards, preventing any issues or returns after delivery. These enhancements will enhance user experience by offering more delivery options and guaranteeing the quality and reliability of the products being shipped.","title":"Home"},{"location":"#geo-bazaar-application-documentation","text":"","title":"Geo Bazaar Application Documentation"},{"location":"#introduction","text":"Geo Bazaar is an innovative e-commerce platform built using Python Django with PostgreSQL as its database. The project aims to provide a unique shopping experience by specializing in location-specific products that are not typically available outside their regions of origin. These products often carry a rich cultural, traditional, or artisanal value , offering users the opportunity to explore and purchase items that reflect the essence of different places. With Geo Bazaar, buyers can: - Connect with the uniqueness of diverse locations. - Support local artisans. - Help preserve cultural heritage. This platform aspires to bridge the gap between local sellers and global buyers in a seamless and accessible manner.","title":"Introduction"},{"location":"#table-of-contents","text":"Overview Key Features Technologies Used Future Enhancements","title":"Table of Contents"},{"location":"#overview","text":"Modules(user) 1. User Management 2. Profile Management 3. Home Section 4. Product Listing 5. Product Details 6. Cart 7. Wishlist 8. Payment 9. User To Seller Modules(admin) 1. Audhentication 2. Admin User Management 3. Product Management 4. Order Management> 5. Analytics and Reporting 6. Manage Delivary Partener 7. Manage Delivary Partener Modules(Delivary Partner) 1. Audhentication 2. Product Management","title":"Overview"},{"location":"#key-features","text":"Location Specific Products : Dedicated platform to buy historical, cultural, traditional products Search and Filter : Buyers can search for products by category, region, or name. Secure Payments : Integration of a secure payment gateway for transactions. User Management : Separate dashboards for buyers and delivary partnerers. Order Tracking : Buyers can track their orders in real-time. Product Reviews : Customers can leave reviews for purchased items. Customer To Seller : Customers can apply for selling their unique products. Admin Validations : Admin can verify the products relevancy in the region and the history","title":"Key Features"},{"location":"#technologies-used","text":"Backend : Python and Django Database : PostgreSQL Frontend : HTML, CSS, JavaScript APIs : Payment gateway and geolocation services Version Control : Git and GitHub","title":"Technologies Used"},{"location":"#future-enhancements","text":"","title":"Future Enhancements"},{"location":"#1-integration-of-additional-delivery-partners","text":"In the future, we plan to add multiple delivery partners to improve the efficiency and flexibility of product deliveries to customers. By integrating various delivery services, customers will have more options to choose from, ensuring timely and cost-effective deliveries.","title":"1. Integration of Additional Delivery Partners"},{"location":"#2-product-validity-verification","text":"Additionally, we aim to incorporate a system where the delivery partners will verify the validity of the product before shipping it to the customer. This will ensure that the product is in proper condition and meets all the necessary standards, preventing any issues or returns after delivery. These enhancements will enhance user experience by offering more delivery options and guaranteeing the quality and reliability of the products being shipped.","title":"2. Product Validity Verification"},{"location":"admin_audhenticato/","text":"Module 1: Admin Authentication Purpose Allows administrators to securely sign in and access the platform's admin system for management purposes. Features Admin Login: Secure login system for administrators using email and password. Email verification for first-time login or account activation. Admin Authentication: Enable secure sign-in to the system with session management to prevent unauthorized access. Support for password reset via email. Basic Account Security: Notify admins via email for suspicious login attempts. Dependencies Django's built-in authentication system for admin login/logout functionality. Email service for account verification and password resets. Middleware for session management and security features. Frontend components for the admin login interface (e.g., Bootstrap or React for custom designs). (planning to do it as single window one system for every user)","title":"Audhentication"},{"location":"admin_audhenticato/#module-1-admin-authentication","text":"","title":"Module 1: Admin Authentication"},{"location":"admin_audhenticato/#purpose","text":"Allows administrators to securely sign in and access the platform's admin system for management purposes.","title":"Purpose"},{"location":"admin_audhenticato/#features","text":"Admin Login: Secure login system for administrators using email and password. Email verification for first-time login or account activation. Admin Authentication: Enable secure sign-in to the system with session management to prevent unauthorized access. Support for password reset via email. Basic Account Security: Notify admins via email for suspicious login attempts.","title":"Features"},{"location":"admin_audhenticato/#dependencies","text":"Django's built-in authentication system for admin login/logout functionality. Email service for account verification and password resets. Middleware for session management and security features. Frontend components for the admin login interface (e.g., Bootstrap or React for custom designs). (planning to do it as single window one system for every user)","title":"Dependencies"},{"location":"admin_dashboard/","text":"Admin Dashboard Module 2. Admin Dashboard Description Allows an admin to access the dashboard to view system statistics and manage platform data. Method: GET Endpoint : /admin_dashboard Request Parameter Name Description Type Length token Admin authentication token String N/A Note: The token should be passed in the request header for authorization. Response Status Code Description 200 Returns dashboard data (system stats, user counts) 401 {\"error\": \"Unauthorized access, invalid token\"} Example Request Headers: ```http Authorization: Bearer","title":"Admin DashBoard"},{"location":"admin_dashboard/#admin-dashboard-module","text":"","title":"Admin Dashboard Module"},{"location":"admin_dashboard/#2-admin-dashboard","text":"","title":"2. Admin Dashboard"},{"location":"admin_dashboard/#description","text":"Allows an admin to access the dashboard to view system statistics and manage platform data.","title":"Description"},{"location":"admin_dashboard/#method-get","text":"Endpoint : /admin_dashboard","title":"Method: GET"},{"location":"admin_dashboard/#request","text":"Parameter Name Description Type Length token Admin authentication token String N/A Note: The token should be passed in the request header for authorization.","title":"Request"},{"location":"admin_dashboard/#response","text":"Status Code Description 200 Returns dashboard data (system stats, user counts) 401 {\"error\": \"Unauthorized access, invalid token\"}","title":"Response"},{"location":"admin_dashboard/#example-request","text":"Headers: ```http Authorization: Bearer","title":"Example Request"},{"location":"admin_database/","text":"","title":"Admin database"},{"location":"admin_delivary_partner/","text":"Module 5: Delivery Partner Management Purpose Allows administrators to manage delivery partners, assign orders efficiently, and track order progress to ensure timely deliveries. Features Delivery Partner Management: Add new delivery partners with details such as: Name, contact information, location, and ID proof. Update delivery partner information. Activate or deactivate delivery partner accounts. Order Assignment: Assign specific orders to delivery partners based on: Location proximity. Order Tracking: Monitor the status of all orders in real-time: Pending, dispatched, out for delivery, delivered, or returned. View detailed order tracking, including timestamps for each delivery stage. assign task to verify the product requested by user to sell Performance Monitoring: Track delivery partner performance metrics, such as: Number of orders completed. Average delivery time. Delivery success rates. Identify top-performing and underperforming delivery partners for feedback or rewards. Reports: Generate reports on delivery operations, including: Completed and pending deliveries. Delivery times and delays. Partner-specific performance analysis. Dependencies Django models for storing delivery partner and order data. Frontend components for an admin dashboard interface Backend logic for assigning orders and managing delivery workflows.","title":"Admin Delivary Partner Management"},{"location":"admin_delivary_partner/#module-5-delivery-partner-management","text":"","title":"Module 5: Delivery Partner Management"},{"location":"admin_delivary_partner/#purpose","text":"Allows administrators to manage delivery partners, assign orders efficiently, and track order progress to ensure timely deliveries.","title":"Purpose"},{"location":"admin_delivary_partner/#features","text":"Delivery Partner Management: Add new delivery partners with details such as: Name, contact information, location, and ID proof. Update delivery partner information. Activate or deactivate delivery partner accounts. Order Assignment: Assign specific orders to delivery partners based on: Location proximity. Order Tracking: Monitor the status of all orders in real-time: Pending, dispatched, out for delivery, delivered, or returned. View detailed order tracking, including timestamps for each delivery stage. assign task to verify the product requested by user to sell Performance Monitoring: Track delivery partner performance metrics, such as: Number of orders completed. Average delivery time. Delivery success rates. Identify top-performing and underperforming delivery partners for feedback or rewards. Reports: Generate reports on delivery operations, including: Completed and pending deliveries. Delivery times and delays. Partner-specific performance analysis.","title":"Features"},{"location":"admin_delivary_partner/#dependencies","text":"Django models for storing delivery partner and order data. Frontend components for an admin dashboard interface Backend logic for assigning orders and managing delivery workflows.","title":"Dependencies"},{"location":"admin_feedback/","text":"Admin Feedback Module 9. Feedback Section Description Allows the admin to view and manage customer feedback. The admin can retrieve all feedback, respond to specific feedback, or delete feedback if necessary. Method: GET, POST, DELETE 1. View Feedback Endpoint : /admin/feedback Method : GET Request Parameter Name Description Type Length token Admin authentication token String N/A feedback_id (Optional) Specific feedback to view Integer N/A Note: If feedback_id is not provided, all feedback will be retrieved. Response Status Code Description 200 Returns feedback data 401 {\"error\": \"Unauthorized access, invalid token\"} 404 {\"error\": \"Feedback not found\"} Example Request Headers: ```http Authorization: Bearer","title":"Admin Feeback"},{"location":"admin_feedback/#admin-feedback-module","text":"","title":"Admin Feedback Module"},{"location":"admin_feedback/#9-feedback-section","text":"","title":"9. Feedback Section"},{"location":"admin_feedback/#description","text":"Allows the admin to view and manage customer feedback. The admin can retrieve all feedback, respond to specific feedback, or delete feedback if necessary.","title":"Description"},{"location":"admin_feedback/#method-get-post-delete","text":"","title":"Method: GET, POST, DELETE"},{"location":"admin_feedback/#1-view-feedback","text":"Endpoint : /admin/feedback Method : GET","title":"1. View Feedback"},{"location":"admin_feedback/#request","text":"Parameter Name Description Type Length token Admin authentication token String N/A feedback_id (Optional) Specific feedback to view Integer N/A Note: If feedback_id is not provided, all feedback will be retrieved.","title":"Request"},{"location":"admin_feedback/#response","text":"Status Code Description 200 Returns feedback data 401 {\"error\": \"Unauthorized access, invalid token\"} 404 {\"error\": \"Feedback not found\"}","title":"Response"},{"location":"admin_feedback/#example-request","text":"Headers: ```http Authorization: Bearer","title":"Example Request"},{"location":"admin_order_delete/","text":"Admin Orders Module 5. Delete Order Description Allows the admin to delete a specific order from the system. Method: DELETE Endpoint : /admin/orders/{order_id} Request Parameter Name Description Type Length order_id ID of the order to be deleted Integer N/A token Admin authentication token String N/A Note: The token should be passed in the request header for authorization. Response Status Code Description 200 \"Order deleted successfully\" 401 {\"error\": \"Unauthorized access, invalid token\"} 404 {\"error\": \"Order not found\"} Example Request Headers: ```http Authorization: Bearer","title":"Admin Orderes Delete"},{"location":"admin_order_delete/#admin-orders-module","text":"","title":"Admin Orders Module"},{"location":"admin_order_delete/#5-delete-order","text":"","title":"5. Delete Order"},{"location":"admin_order_delete/#description","text":"Allows the admin to delete a specific order from the system.","title":"Description"},{"location":"admin_order_delete/#method-delete","text":"Endpoint : /admin/orders/{order_id}","title":"Method: DELETE"},{"location":"admin_order_delete/#request","text":"Parameter Name Description Type Length order_id ID of the order to be deleted Integer N/A token Admin authentication token String N/A Note: The token should be passed in the request header for authorization.","title":"Request"},{"location":"admin_order_delete/#response","text":"Status Code Description 200 \"Order deleted successfully\" 401 {\"error\": \"Unauthorized access, invalid token\"} 404 {\"error\": \"Order not found\"}","title":"Response"},{"location":"admin_order_delete/#example-request","text":"Headers: ```http Authorization: Bearer","title":"Example Request"},{"location":"admin_order_list/","text":"Admin Orders Module 3. Orders List Description Allows the admin to retrieve a list of all orders, including details such as order status, total amount, and customer information. Method: GET Endpoint : /admin/orders Request Parameter Name Description Type Length token Admin authentication token String N/A status (Optional) Filter by status String N/A page (Optional) Pagination page Integer N/A Note: The token should be passed in the request header for authorization. Response Status Code Description 200 Returns a paginated list of all orders 401 {\"error\": \"Unauthorized access, invalid token\"} 404 {\"error\": \"No orders found\"} Example Request Headers: ```http Authorization: Bearer","title":"Admin Orderes List"},{"location":"admin_order_list/#admin-orders-module","text":"","title":"Admin Orders Module"},{"location":"admin_order_list/#3-orders-list","text":"","title":"3. Orders List"},{"location":"admin_order_list/#description","text":"Allows the admin to retrieve a list of all orders, including details such as order status, total amount, and customer information.","title":"Description"},{"location":"admin_order_list/#method-get","text":"Endpoint : /admin/orders","title":"Method: GET"},{"location":"admin_order_list/#request","text":"Parameter Name Description Type Length token Admin authentication token String N/A status (Optional) Filter by status String N/A page (Optional) Pagination page Integer N/A Note: The token should be passed in the request header for authorization.","title":"Request"},{"location":"admin_order_list/#response","text":"Status Code Description 200 Returns a paginated list of all orders 401 {\"error\": \"Unauthorized access, invalid token\"} 404 {\"error\": \"No orders found\"}","title":"Response"},{"location":"admin_order_list/#example-request","text":"Headers: ```http Authorization: Bearer","title":"Example Request"},{"location":"admin_order_management/","text":"Module 3: Admin and Delivery Partner Order Management Purpose Allows administrators to manage customer orders and coordinate with delivery partners for efficient order fulfillment. Features Admin Order Management: View and manage all customer orders, including: Order details (product, quantity, price). Customer details (name, address, contact). Order status (Pending, Confirmed, Shipped, Delivered, Cancelled). Update order status as it progresses through different stages (e.g., shipped, out for delivery). Assign orders to delivery partners for fulfillment. Track payment status (Paid, Pending, Refunded). Generate invoices for completed orders. View order history for analytics and reporting.","title":"Admin Order Management"},{"location":"admin_order_management/#module-3-admin-and-delivery-partner-order-management","text":"","title":"Module 3: Admin and Delivery Partner Order Management"},{"location":"admin_order_management/#purpose","text":"Allows administrators to manage customer orders and coordinate with delivery partners for efficient order fulfillment.","title":"Purpose"},{"location":"admin_order_management/#features","text":"Admin Order Management: View and manage all customer orders, including: Order details (product, quantity, price). Customer details (name, address, contact). Order status (Pending, Confirmed, Shipped, Delivered, Cancelled). Update order status as it progresses through different stages (e.g., shipped, out for delivery). Assign orders to delivery partners for fulfillment. Track payment status (Paid, Pending, Refunded). Generate invoices for completed orders. View order history for analytics and reporting.","title":"Features"},{"location":"admin_order_update/","text":"Admin Orders Module 2. Update Order Description Allows the admin to update the status or details of a specific order, including user and product details. Method: PUT Endpoint : /admin/orders/{order_id} Request Headers Parameter Name Description Type Authorization Bearer token for admin auth String Body Parameters Parameter Name Description Type Length order_id ID of the order to be updated Integer N/A status New status of the order String N/A notes (Optional) Admin notes String N/A user_name Name of the user who placed the order String N/A product_name Name of the product in the order String N/A address Delivery address for the order String N/A contact_number Contact number of the user String N/A quantity Quantity of the product ordered Integer N/A total_price Total price of the order Float N/A Note: The order_id is passed as a URL path parameter. The Authorization header contains the admin token for authentication. Response Status Code Description 200 \"Order updated successfully\" 400 {\"error\": \"Invalid status value\"} 401 {\"error\": \"Unauthorized access, invalid token\"} 404 {\"error\": \"Order not found\"} Example Request Headers: ```http Authorization: Bearer","title":"Admin Orderes Update"},{"location":"admin_order_update/#admin-orders-module","text":"","title":"Admin Orders Module"},{"location":"admin_order_update/#2-update-order","text":"","title":"2. Update Order"},{"location":"admin_order_update/#description","text":"Allows the admin to update the status or details of a specific order, including user and product details.","title":"Description"},{"location":"admin_order_update/#method-put","text":"Endpoint : /admin/orders/{order_id}","title":"Method: PUT"},{"location":"admin_order_update/#request","text":"","title":"Request"},{"location":"admin_order_update/#headers","text":"Parameter Name Description Type Authorization Bearer token for admin auth String","title":"Headers"},{"location":"admin_order_update/#body-parameters","text":"Parameter Name Description Type Length order_id ID of the order to be updated Integer N/A status New status of the order String N/A notes (Optional) Admin notes String N/A user_name Name of the user who placed the order String N/A product_name Name of the product in the order String N/A address Delivery address for the order String N/A contact_number Contact number of the user String N/A quantity Quantity of the product ordered Integer N/A total_price Total price of the order Float N/A Note: The order_id is passed as a URL path parameter. The Authorization header contains the admin token for authentication.","title":"Body Parameters"},{"location":"admin_order_update/#response","text":"Status Code Description 200 \"Order updated successfully\" 400 {\"error\": \"Invalid status value\"} 401 {\"error\": \"Unauthorized access, invalid token\"} 404 {\"error\": \"Order not found\"}","title":"Response"},{"location":"admin_order_update/#example-request","text":"Headers: ```http Authorization: Bearer","title":"Example Request"},{"location":"admin_product_Delete/","text":"Admin Products Module 3. Delete Product Description Allows the admin to delete a specific product from the system. Method: DELETE Endpoint : /admin/products/{product_id} Request Parameter Name Description Type Length product_id ID of the product to be deleted Integer N/A token Admin authentication token String N/A Note: The token should be passed in the request header for authorization. Response Status Code Description 200 \"Product deleted successfully\" 401 {\"error\": \"Unauthorized access, invalid token\"} 404 {\"error\": \"Product not found\"} Example Request Headers: ```http Authorization: Bearer","title":"Admin Product Delete"},{"location":"admin_product_Delete/#admin-products-module","text":"","title":"Admin Products Module"},{"location":"admin_product_Delete/#3-delete-product","text":"","title":"3. Delete Product"},{"location":"admin_product_Delete/#description","text":"Allows the admin to delete a specific product from the system.","title":"Description"},{"location":"admin_product_Delete/#method-delete","text":"Endpoint : /admin/products/{product_id}","title":"Method: DELETE"},{"location":"admin_product_Delete/#request","text":"Parameter Name Description Type Length product_id ID of the product to be deleted Integer N/A token Admin authentication token String N/A Note: The token should be passed in the request header for authorization.","title":"Request"},{"location":"admin_product_Delete/#response","text":"Status Code Description 200 \"Product deleted successfully\" 401 {\"error\": \"Unauthorized access, invalid token\"} 404 {\"error\": \"Product not found\"}","title":"Response"},{"location":"admin_product_Delete/#example-request","text":"Headers: ```http Authorization: Bearer","title":"Example Request"},{"location":"admin_product_add/","text":"Admin Products Module 4. Add Product Description Allows the admin to add a new product to the system, including details like name, category, price, stock quantity, and more. Method: POST Endpoint : /admin/products Request Parameter Name Description Type Length token Admin authentication token String N/A name Name of the product String 1-255 category Category of the product String 1-100 price Price of the product Float N/A stock Available stock quantity Integer N/A description (Optional) Description of the product String N/A image_url (Optional) Image URL for the product String N/A Note: The token should be passed in the request header for authorization. All parameters are required unless marked as optional. Response Status Code Description 201 \"Product added successfully\" 400 {\"error\": \"Invalid input, missing required fields\"} 401 {\"error\": \"Unauthorized access, invalid token\"} 409 {\"error\": \"Product already exists\"} Example Request Headers: ```http Authorization: Bearer","title":"Admin Product Add"},{"location":"admin_product_add/#admin-products-module","text":"","title":"Admin Products Module"},{"location":"admin_product_add/#4-add-product","text":"","title":"4. Add Product"},{"location":"admin_product_add/#description","text":"Allows the admin to add a new product to the system, including details like name, category, price, stock quantity, and more.","title":"Description"},{"location":"admin_product_add/#method-post","text":"Endpoint : /admin/products","title":"Method: POST"},{"location":"admin_product_add/#request","text":"Parameter Name Description Type Length token Admin authentication token String N/A name Name of the product String 1-255 category Category of the product String 1-100 price Price of the product Float N/A stock Available stock quantity Integer N/A description (Optional) Description of the product String N/A image_url (Optional) Image URL for the product String N/A Note: The token should be passed in the request header for authorization. All parameters are required unless marked as optional.","title":"Request"},{"location":"admin_product_add/#response","text":"Status Code Description 201 \"Product added successfully\" 400 {\"error\": \"Invalid input, missing required fields\"} 401 {\"error\": \"Unauthorized access, invalid token\"} 409 {\"error\": \"Product already exists\"}","title":"Response"},{"location":"admin_product_add/#example-request","text":"Headers: ```http Authorization: Bearer","title":"Example Request"},{"location":"admin_product_list/","text":"Admin Products Module 1. List All Products Description Allows the admin to retrieve a list of all available products in the system. Method: GET Endpoint : /admin/products Request Parameter Name Description Type Length token Admin authentication token String N/A page (Optional) Pagination page Integer N/A category (Optional) Filter by product category String N/A Note: The token should be passed in the request header for authorization. Response Status Code Description 200 Returns a paginated list of all products 401 {\"error\": \"Unauthorized access, invalid token\"} 404 {\"error\": \"No products found\"} Example Request Headers: ```http Authorization: Bearer","title":"Admin Product List"},{"location":"admin_product_list/#admin-products-module","text":"","title":"Admin Products Module"},{"location":"admin_product_list/#1-list-all-products","text":"","title":"1. List All Products"},{"location":"admin_product_list/#description","text":"Allows the admin to retrieve a list of all available products in the system.","title":"Description"},{"location":"admin_product_list/#method-get","text":"Endpoint : /admin/products","title":"Method: GET"},{"location":"admin_product_list/#request","text":"Parameter Name Description Type Length token Admin authentication token String N/A page (Optional) Pagination page Integer N/A category (Optional) Filter by product category String N/A Note: The token should be passed in the request header for authorization.","title":"Request"},{"location":"admin_product_list/#response","text":"Status Code Description 200 Returns a paginated list of all products 401 {\"error\": \"Unauthorized access, invalid token\"} 404 {\"error\": \"No products found\"}","title":"Response"},{"location":"admin_product_list/#example-request","text":"Headers: ```http Authorization: Bearer","title":"Example Request"},{"location":"admin_product_management/","text":"Module 2: Admin Product and Category Management Purpose Provides administrators the ability to manage products and categories, ensuring the platform's offerings are organized and up-to-date. Features Product Management: Add new products with details such as: Name, description, price, and images. Stock availability and location-specific tags. Cultural or historical background (if applicable). Update existing product details. Delete or deactivate products from the platform. Category Management: Add new product categories for better organization. Edit or update category details, including: Category name and description. Assign specific products to categories. Remove unused or irrelevant categories. Product-Centric Features: Preview products before publishing them. Manage discounts or special pricing for selected products. Add tags for filtering products by region, popularity, or trends. Dependencies Django models for storing product and category data. File storage system for managing product images (e.g., local storage or cloud-based solutions). Admin panel or custom dashboard interface for managing products and categories. Frontend components for dynamic forms and data visualization Backend logic for validating product and category data.","title":"Admin Product Management"},{"location":"admin_product_management/#module-2-admin-product-and-category-management","text":"","title":"Module 2: Admin Product and Category Management"},{"location":"admin_product_management/#purpose","text":"Provides administrators the ability to manage products and categories, ensuring the platform's offerings are organized and up-to-date.","title":"Purpose"},{"location":"admin_product_management/#features","text":"Product Management: Add new products with details such as: Name, description, price, and images. Stock availability and location-specific tags. Cultural or historical background (if applicable). Update existing product details. Delete or deactivate products from the platform. Category Management: Add new product categories for better organization. Edit or update category details, including: Category name and description. Assign specific products to categories. Remove unused or irrelevant categories. Product-Centric Features: Preview products before publishing them. Manage discounts or special pricing for selected products. Add tags for filtering products by region, popularity, or trends.","title":"Features"},{"location":"admin_product_management/#dependencies","text":"Django models for storing product and category data. File storage system for managing product images (e.g., local storage or cloud-based solutions). Admin panel or custom dashboard interface for managing products and categories. Frontend components for dynamic forms and data visualization Backend logic for validating product and category data.","title":"Dependencies"},{"location":"admin_product_update/","text":"Admin Products Module 2. Update Product Description Allows the admin to update the details of an existing product, including name, price, stock, and category. Method: PUT Endpoint : /admin/products/{product_id} Request Parameter Name Description Type Length product_id ID of the product to be updated Integer N/A token Admin authentication token String N/A name (Optional) New name of the product String N/A category (Optional) New category of the product String N/A price (Optional) New price of the product Float N/A stock (Optional) New stock quantity Integer N/A Note: The token should be passed in the request header for authorization. At least one parameter ( name , category , price , or stock ) should be provided to update the product. Response Status Code Description 200 \"Product updated successfully\" 400 {\"error\": \"Invalid input, some parameters missing or invalid\"} 401 {\"error\": \"Unauthorized access, invalid token\"} 404 {\"error\": \"Product not found\"} Example Request Headers: ```http Authorization: Bearer","title":"Admin Product Update"},{"location":"admin_product_update/#admin-products-module","text":"","title":"Admin Products Module"},{"location":"admin_product_update/#2-update-product","text":"","title":"2. Update Product"},{"location":"admin_product_update/#description","text":"Allows the admin to update the details of an existing product, including name, price, stock, and category.","title":"Description"},{"location":"admin_product_update/#method-put","text":"Endpoint : /admin/products/{product_id}","title":"Method: PUT"},{"location":"admin_product_update/#request","text":"Parameter Name Description Type Length product_id ID of the product to be updated Integer N/A token Admin authentication token String N/A name (Optional) New name of the product String N/A category (Optional) New category of the product String N/A price (Optional) New price of the product Float N/A stock (Optional) New stock quantity Integer N/A Note: The token should be passed in the request header for authorization. At least one parameter ( name , category , price , or stock ) should be provided to update the product.","title":"Request"},{"location":"admin_product_update/#response","text":"Status Code Description 200 \"Product updated successfully\" 400 {\"error\": \"Invalid input, some parameters missing or invalid\"} 401 {\"error\": \"Unauthorized access, invalid token\"} 404 {\"error\": \"Product not found\"}","title":"Response"},{"location":"admin_product_update/#example-request","text":"Headers: ```http Authorization: Bearer","title":"Example Request"},{"location":"admin_product_verification/","text":"Admin Product Verification Module Purpose Allows administrators to manage and verify new product selling requests from users. Features Product Request Listing and Search View paginated list of pending product requests. Search by Product Name, Category, Seller, and Status. Product Details View details such as Product Name, Description, Price, Stock, Images, and Seller Info. Product Verification Actions Approve or Reject product requests. Add optional comments or feedback for the seller. Product Activity Log Track actions like submission, approval/rejection, and admin comments. Filter by product, seller, or action type. Email Notifications Send automatic email notifications for approval or rejection. Bulk Actions Approve or Reject multiple product requests at once. Dependencies Django\u2019s product model for management. QuerySet for filtering and listing requests. Email service for notifications. Responsive frontend for management interface.","title":"Admin User Product Verification"},{"location":"admin_product_verification/#admin-product-verification-module","text":"","title":"Admin Product Verification Module"},{"location":"admin_product_verification/#purpose","text":"Allows administrators to manage and verify new product selling requests from users.","title":"Purpose"},{"location":"admin_product_verification/#features","text":"","title":"Features"},{"location":"admin_product_verification/#product-request-listing-and-search","text":"View paginated list of pending product requests. Search by Product Name, Category, Seller, and Status.","title":"Product Request Listing and Search"},{"location":"admin_product_verification/#product-details","text":"View details such as Product Name, Description, Price, Stock, Images, and Seller Info.","title":"Product Details"},{"location":"admin_product_verification/#product-verification-actions","text":"Approve or Reject product requests. Add optional comments or feedback for the seller.","title":"Product Verification Actions"},{"location":"admin_product_verification/#product-activity-log","text":"Track actions like submission, approval/rejection, and admin comments. Filter by product, seller, or action type.","title":"Product Activity Log"},{"location":"admin_product_verification/#email-notifications","text":"Send automatic email notifications for approval or rejection.","title":"Email Notifications"},{"location":"admin_product_verification/#bulk-actions","text":"Approve or Reject multiple product requests at once.","title":"Bulk Actions"},{"location":"admin_product_verification/#dependencies","text":"Django\u2019s product model for management. QuerySet for filtering and listing requests. Email service for notifications. Responsive frontend for management interface.","title":"Dependencies"},{"location":"admin_report/","text":"Admin Reports Module 13. View Reports Description Allows the admin to view various reports such as sales, orders, customers, and products. Method: GET Endpoint : /admin/reports Request Parameter Name Description Type Length token Admin authentication token String N/A report_type (Optional) Type of report to view String N/A start_date (Optional) Start date for the report (YYYY-MM-DD) String N/A end_date (Optional) End date for the report (YYYY-MM-DD) String N/A Supported report_type values: sales orders customers products Note: The token should be passed in the request header for authorization. If report_type is not provided, a summary report will be returned. Response Status Code Description 200 Returns the requested report data 401 {\"error\": \"Unauthorized access, invalid token\"} 400 {\"error\": \"Invalid report type or date range\"} 404 {\"error\": \"No data found for the selected report\"} Example Request Headers: ```http Authorization: Bearer","title":"Admin Report"},{"location":"admin_report/#admin-reports-module","text":"","title":"Admin Reports Module"},{"location":"admin_report/#13-view-reports","text":"","title":"13. View Reports"},{"location":"admin_report/#description","text":"Allows the admin to view various reports such as sales, orders, customers, and products.","title":"Description"},{"location":"admin_report/#method-get","text":"Endpoint : /admin/reports","title":"Method: GET"},{"location":"admin_report/#request","text":"Parameter Name Description Type Length token Admin authentication token String N/A report_type (Optional) Type of report to view String N/A start_date (Optional) Start date for the report (YYYY-MM-DD) String N/A end_date (Optional) End date for the report (YYYY-MM-DD) String N/A Supported report_type values: sales orders customers products Note: The token should be passed in the request header for authorization. If report_type is not provided, a summary report will be returned.","title":"Request"},{"location":"admin_report/#response","text":"Status Code Description 200 Returns the requested report data 401 {\"error\": \"Unauthorized access, invalid token\"} 400 {\"error\": \"Invalid report type or date range\"} 404 {\"error\": \"No data found for the selected report\"}","title":"Response"},{"location":"admin_report/#example-request","text":"Headers: ```http Authorization: Bearer","title":"Example Request"},{"location":"admin_reports_and_analytics/","text":"Module 4: Reports and Analytics Purpose Provides administrators with detailed insights into platform performance, user behavior, and sales trends to support decision-making and strategy development. Features Dashboard Overview: Display key metrics such as: Total sales, orders, and revenue. Active users, delivery partners. Pending and completed orders. Graphical representations of trends (e.g., bar charts, pie charts, line graphs). Sales Reports: Generate detailed reports on: Top-performing products and categories. Region-specific sales performance. Export sales reports in formats such as CSV or PDF. User Reports: Analyze user activity, including: New user registrations over time. delivery partner performance metrics. Identify inactive users or accounts for follow-up actions. Order Reports: View comprehensive order statistics: Orders by status (e.g., pending, shipped, delivered). Average order value. Delivery success rates. Identify delayed or cancelled orders for improvement. Category and Product Insights: Track category-wise performance. Identify trending or underperforming products. Notifications and Alerts: Notify admins of significant changes or anomalies in metrics. Generate alerts for sales milestones or declining performance. Dependencies Django models for storing sales, user, and order data. Libraries for generating and visualizing reports (e.g., Matplotlib, Chart.js). File storage for exporting reports (e.g., CSV, PDF). Frontend components for an interactive admin dashboard Backend logic for aggregating and analyzing data.","title":"Admin Reports And Analytics"},{"location":"admin_reports_and_analytics/#module-4-reports-and-analytics","text":"","title":"Module 4: Reports and Analytics"},{"location":"admin_reports_and_analytics/#purpose","text":"Provides administrators with detailed insights into platform performance, user behavior, and sales trends to support decision-making and strategy development.","title":"Purpose"},{"location":"admin_reports_and_analytics/#features","text":"Dashboard Overview: Display key metrics such as: Total sales, orders, and revenue. Active users, delivery partners. Pending and completed orders. Graphical representations of trends (e.g., bar charts, pie charts, line graphs). Sales Reports: Generate detailed reports on: Top-performing products and categories. Region-specific sales performance. Export sales reports in formats such as CSV or PDF. User Reports: Analyze user activity, including: New user registrations over time. delivery partner performance metrics. Identify inactive users or accounts for follow-up actions. Order Reports: View comprehensive order statistics: Orders by status (e.g., pending, shipped, delivered). Average order value. Delivery success rates. Identify delayed or cancelled orders for improvement. Category and Product Insights: Track category-wise performance. Identify trending or underperforming products. Notifications and Alerts: Notify admins of significant changes or anomalies in metrics. Generate alerts for sales milestones or declining performance.","title":"Features"},{"location":"admin_reports_and_analytics/#dependencies","text":"Django models for storing sales, user, and order data. Libraries for generating and visualizing reports (e.g., Matplotlib, Chart.js). File storage for exporting reports (e.g., CSV, PDF). Frontend components for an interactive admin dashboard Backend logic for aggregating and analyzing data.","title":"Dependencies"},{"location":"admin_selling_request/","text":"Admin Selling Requests Module 10. View New Product Selling Requests Description Allows the admin to view and manage new product selling requests submitted by users. Admin can review, approve, or reject the requests. Method: GET Endpoint : /admin/selling-requests Request Parameter Name Description Type Length token Admin authentication token String N/A request_id (Optional) Specific request to view Integer N/A Note: If request_id is not provided, all pending selling requests will be listed. Response Status Code Description 200 Returns the list of selling requests 401 {\"error\": \"Unauthorized access, invalid token\"} 404 {\"error\": \"No selling requests found\"} Example Request Headers: ```http Authorization: Bearer","title":"Admin Selling Request"},{"location":"admin_selling_request/#admin-selling-requests-module","text":"","title":"Admin Selling Requests Module"},{"location":"admin_selling_request/#10-view-new-product-selling-requests","text":"","title":"10. View New Product Selling Requests"},{"location":"admin_selling_request/#description","text":"Allows the admin to view and manage new product selling requests submitted by users. Admin can review, approve, or reject the requests.","title":"Description"},{"location":"admin_selling_request/#method-get","text":"Endpoint : /admin/selling-requests","title":"Method: GET"},{"location":"admin_selling_request/#request","text":"Parameter Name Description Type Length token Admin authentication token String N/A request_id (Optional) Specific request to view Integer N/A Note: If request_id is not provided, all pending selling requests will be listed.","title":"Request"},{"location":"admin_selling_request/#response","text":"Status Code Description 200 Returns the list of selling requests 401 {\"error\": \"Unauthorized access, invalid token\"} 404 {\"error\": \"No selling requests found\"}","title":"Response"},{"location":"admin_selling_request/#example-request","text":"Headers: ```http Authorization: Bearer","title":"Example Request"},{"location":"admin_user_add/","text":"Admin Customers Module 12. Add New Customer Description Allows the admin to add a new customer to the system by providing all necessary details. Method: POST Endpoint : /admin/customers Request Parameter Name Description Type Length token Admin authentication token String N/A name Name of the new customer String 1-255 email Email address of the new customer String 1-255 phone Phone number of the new customer String 1-15 address Address of the new customer String N/A password Password for the new customer account String 6-128 Note: The token should be passed in the request header for authorization. Response Status Code Description 201 \"Customer added successfully\" 400 {\"error\": \"Invalid input, missing required fields\"} 401 {\"error\": \"Unauthorized access, invalid token\"} 409 {\"error\": \"Customer with this email already exists\"} Example Request Headers: ```http Authorization: Bearer","title":"Admin User Add"},{"location":"admin_user_add/#admin-customers-module","text":"","title":"Admin Customers Module"},{"location":"admin_user_add/#12-add-new-customer","text":"","title":"12. Add New Customer"},{"location":"admin_user_add/#description","text":"Allows the admin to add a new customer to the system by providing all necessary details.","title":"Description"},{"location":"admin_user_add/#method-post","text":"Endpoint : /admin/customers","title":"Method: POST"},{"location":"admin_user_add/#request","text":"Parameter Name Description Type Length token Admin authentication token String N/A name Name of the new customer String 1-255 email Email address of the new customer String 1-255 phone Phone number of the new customer String 1-15 address Address of the new customer String N/A password Password for the new customer account String 6-128 Note: The token should be passed in the request header for authorization.","title":"Request"},{"location":"admin_user_add/#response","text":"Status Code Description 201 \"Customer added successfully\" 400 {\"error\": \"Invalid input, missing required fields\"} 401 {\"error\": \"Unauthorized access, invalid token\"} 409 {\"error\": \"Customer with this email already exists\"}","title":"Response"},{"location":"admin_user_add/#example-request","text":"Headers: ```http Authorization: Bearer","title":"Example Request"},{"location":"admin_user_list/","text":"Admin Customers Module 5. List All Customers Description Allows the admin to retrieve a list of all registered customers in the system. Method: GET Endpoint : /admin/customers Request Parameter Name Description Type Length token Admin authentication token String N/A page (Optional) Pagination page Integer N/A search (Optional) Search by customer name or email String N/A Note: The token should be passed in the request header for authorization. Response Status Code Description 200 Returns a paginated list of all customers 401 {\"error\": \"Unauthorized access, invalid token\"} 404 {\"error\": \"No customers found\"} Example Request Headers: ```http Authorization: Bearer","title":"Admin User List"},{"location":"admin_user_list/#admin-customers-module","text":"","title":"Admin Customers Module"},{"location":"admin_user_list/#5-list-all-customers","text":"","title":"5. List All Customers"},{"location":"admin_user_list/#description","text":"Allows the admin to retrieve a list of all registered customers in the system.","title":"Description"},{"location":"admin_user_list/#method-get","text":"Endpoint : /admin/customers","title":"Method: GET"},{"location":"admin_user_list/#request","text":"Parameter Name Description Type Length token Admin authentication token String N/A page (Optional) Pagination page Integer N/A search (Optional) Search by customer name or email String N/A Note: The token should be passed in the request header for authorization.","title":"Request"},{"location":"admin_user_list/#response","text":"Status Code Description 200 Returns a paginated list of all customers 401 {\"error\": \"Unauthorized access, invalid token\"} 404 {\"error\": \"No customers found\"}","title":"Response"},{"location":"admin_user_list/#example-request","text":"Headers: ```http Authorization: Bearer","title":"Example Request"},{"location":"admin_user_management/","text":"Module 2: Admin User Management Purpose Allows administrators to manage platform users, including viewing user details, tracking activities, and adding new users. Features User Listing and Search View a paginated list of all users. Search users by: Name Email Role (e.g., Customer, Vendor, Admin) Status (Active/Inactive) User Details View detailed information such as: Name, email, role, account status. Registration date and last login time. Recent activities (e.g., orders, actions). User Activity Log Display user-specific activities like: Login history. Actions performed on the platform. Filter activities by date or type. Add New User Create users with fields for: Name, email, password, and role. Send account activation emails upon creation. User Account Management Activate/deactivate accounts. Reset passwords and send reset links. Modify user roles or permissions. Dependencies Django\u2019s user model for role-based management. QuerySet for user listing and search. Email service for notifications and account setup. Responsive frontend for user management interface.","title":"Admin User Management"},{"location":"admin_user_management/#module-2-admin-user-management","text":"","title":"Module 2: Admin User Management"},{"location":"admin_user_management/#purpose","text":"Allows administrators to manage platform users, including viewing user details, tracking activities, and adding new users.","title":"Purpose"},{"location":"admin_user_management/#features","text":"","title":"Features"},{"location":"admin_user_management/#user-listing-and-search","text":"View a paginated list of all users. Search users by: Name Email Role (e.g., Customer, Vendor, Admin) Status (Active/Inactive)","title":"User Listing and Search"},{"location":"admin_user_management/#user-details","text":"View detailed information such as: Name, email, role, account status. Registration date and last login time. Recent activities (e.g., orders, actions).","title":"User Details"},{"location":"admin_user_management/#user-activity-log","text":"Display user-specific activities like: Login history. Actions performed on the platform. Filter activities by date or type.","title":"User Activity Log"},{"location":"admin_user_management/#add-new-user","text":"Create users with fields for: Name, email, password, and role. Send account activation emails upon creation.","title":"Add New User"},{"location":"admin_user_management/#user-account-management","text":"Activate/deactivate accounts. Reset passwords and send reset links. Modify user roles or permissions.","title":"User Account Management"},{"location":"admin_user_management/#dependencies","text":"Django\u2019s user model for role-based management. QuerySet for user listing and search. Email service for notifications and account setup. Responsive frontend for user management interface.","title":"Dependencies"},{"location":"admin_user_update/","text":"Admin Customers Module 11. Update Customer Description Allows the admin to update details of an existing customer, such as name, email, phone number, and address. Method: PUT Endpoint : /admin/customers/{customer_id} Request Parameter Name Description Type Length customer_id ID of the customer to be updated Integer N/A token Admin authentication token String N/A name (Optional) New name of the customer String 1-255 email (Optional) New email address String 1-255 phone (Optional) New phone number String 1-15 address (Optional) New address String N/A Note: The token should be passed in the request header for authorization. At least one parameter ( name , email , phone , or address ) should be provided for updating the customer. Response Status Code Description 200 \"Customer updated successfully\" 400 {\"error\": \"Invalid input, missing required fields\"} 401 {\"error\": \"Unauthorized access, invalid token\"} 404 {\"error\": \"Customer not found\"} Example Request Headers: ```http Authorization: Bearer","title":"Admin User Update"},{"location":"admin_user_update/#admin-customers-module","text":"","title":"Admin Customers Module"},{"location":"admin_user_update/#11-update-customer","text":"","title":"11. Update Customer"},{"location":"admin_user_update/#description","text":"Allows the admin to update details of an existing customer, such as name, email, phone number, and address.","title":"Description"},{"location":"admin_user_update/#method-put","text":"Endpoint : /admin/customers/{customer_id}","title":"Method: PUT"},{"location":"admin_user_update/#request","text":"Parameter Name Description Type Length customer_id ID of the customer to be updated Integer N/A token Admin authentication token String N/A name (Optional) New name of the customer String 1-255 email (Optional) New email address String 1-255 phone (Optional) New phone number String 1-15 address (Optional) New address String N/A Note: The token should be passed in the request header for authorization. At least one parameter ( name , email , phone , or address ) should be provided for updating the customer.","title":"Request"},{"location":"admin_user_update/#response","text":"Status Code Description 200 \"Customer updated successfully\" 400 {\"error\": \"Invalid input, missing required fields\"} 401 {\"error\": \"Unauthorized access, invalid token\"} 404 {\"error\": \"Customer not found\"}","title":"Response"},{"location":"admin_user_update/#example-request","text":"Headers: ```http Authorization: Bearer","title":"Example Request"},{"location":"admin_verifing_product/","text":"Admin Product Validation Module 11. Product Validation Form Description This endpoint allows the admin to review the details of a product submitted by a user and validate its authenticity and quality. Admin can approve or reject the product after reviewing. Method: GET, POST 1. View Product Validation Form Endpoint : /admin/validate-product/{request_id} Method : GET Request Parameter Name Description Type Length token Admin authentication token String N/A request_id ID of the product selling request Integer N/A Response Status Code Description 200 Returns the product details for validation 401 {\"error\": \"Unauthorized access, invalid token\"} 404 {\"error\": \"Product request not found\"} Example Request Headers: ```http Authorization: Bearer","title":"Admin Verifing Product"},{"location":"admin_verifing_product/#admin-product-validation-module","text":"","title":"Admin Product Validation Module"},{"location":"admin_verifing_product/#11-product-validation-form","text":"","title":"11. Product Validation Form"},{"location":"admin_verifing_product/#description","text":"This endpoint allows the admin to review the details of a product submitted by a user and validate its authenticity and quality. Admin can approve or reject the product after reviewing.","title":"Description"},{"location":"admin_verifing_product/#method-get-post","text":"","title":"Method: GET, POST"},{"location":"admin_verifing_product/#1-view-product-validation-form","text":"Endpoint : /admin/validate-product/{request_id} Method : GET","title":"1. View Product Validation Form"},{"location":"admin_verifing_product/#request","text":"Parameter Name Description Type Length token Admin authentication token String N/A request_id ID of the product selling request Integer N/A","title":"Request"},{"location":"admin_verifing_product/#response","text":"Status Code Description 200 Returns the product details for validation 401 {\"error\": \"Unauthorized access, invalid token\"} 404 {\"error\": \"Product request not found\"}","title":"Response"},{"location":"admin_verifing_product/#example-request","text":"Headers: ```http Authorization: Bearer","title":"Example Request"},{"location":"apiauth/","text":"Admin Authentication Module 1. Admin Login Description Allows an admin to log in using their username and password. Method: POST Endpoint : /login Request Parameter Name Description Type Length username Admin username String N/A password Admin password String N/A Response Status Code Description 200 \"Successfully Login to Admin panel\" 501 {\"error\": \"Username and password invalid\"} Example Request ```json { \"username\": \"admin_user\", \"password\": \"securepassword\" }","title":"Admin Authentication"},{"location":"apiauth/#admin-authentication-module","text":"","title":"Admin Authentication Module"},{"location":"apiauth/#1-admin-login","text":"","title":"1. Admin Login"},{"location":"apiauth/#description","text":"Allows an admin to log in using their username and password.","title":"Description"},{"location":"apiauth/#method-post","text":"Endpoint : /login","title":"Method: POST"},{"location":"apiauth/#request","text":"Parameter Name Description Type Length username Admin username String N/A password Admin password String N/A","title":"Request"},{"location":"apiauth/#response","text":"Status Code Description 200 \"Successfully Login to Admin panel\" 501 {\"error\": \"Username and password invalid\"}","title":"Response"},{"location":"apiauth/#example-request","text":"```json { \"username\": \"admin_user\", \"password\": \"securepassword\" }","title":"Example Request"},{"location":"audhentication/","text":"Module 1: User Management Purpose Handles user authentication, registration, and profile management. Features User login/logout. Password reset and phone number verification. Profile editing (e.g., address, phone number). Google Sign-In integration for seamless authentication. Dependencies Django authentication system. Django Allauth for Google Sign-In and email verification. django-otp.","title":"Audhentication"},{"location":"audhentication/#module-1-user-management","text":"","title":"Module 1: User Management"},{"location":"audhentication/#purpose","text":"Handles user authentication, registration, and profile management.","title":"Purpose"},{"location":"audhentication/#features","text":"User login/logout. Password reset and phone number verification. Profile editing (e.g., address, phone number). Google Sign-In integration for seamless authentication.","title":"Features"},{"location":"audhentication/#dependencies","text":"Django authentication system. Django Allauth for Google Sign-In and email verification. django-otp.","title":"Dependencies"},{"location":"cart/","text":"Module 6: Shopping Cart Purpose Manages selected products, allowing users to review, update quantities, and proceed to checkout while providing options for applying promo codes or coupons. Features Display selected products with: Product name, image, and price. Quantity selector for each product. Subtotal calculation for each product based on quantity. Show the total cost of all selected products. Provide an input field for applying promo codes or coupons. Validate promo codes and apply discounts dynamically. Allow users to remove items from the cart. Display estimated taxes and shipping charges (if applicable). Include a \"Proceed to Checkout\" button for the next step in the purchase process. Dependencies Django models for managing cart items and promo codes. Frontend components for a dynamic cart interface (e.g., Bootstrap, React). Backend logic for applying discounts and recalculating the total cost. Integration with the product details page and checkout module.","title":"Cart"},{"location":"cart/#module-6-shopping-cart","text":"","title":"Module 6: Shopping Cart"},{"location":"cart/#purpose","text":"Manages selected products, allowing users to review, update quantities, and proceed to checkout while providing options for applying promo codes or coupons.","title":"Purpose"},{"location":"cart/#features","text":"Display selected products with: Product name, image, and price. Quantity selector for each product. Subtotal calculation for each product based on quantity. Show the total cost of all selected products. Provide an input field for applying promo codes or coupons. Validate promo codes and apply discounts dynamically. Allow users to remove items from the cart. Display estimated taxes and shipping charges (if applicable). Include a \"Proceed to Checkout\" button for the next step in the purchase process.","title":"Features"},{"location":"cart/#dependencies","text":"Django models for managing cart items and promo codes. Frontend components for a dynamic cart interface (e.g., Bootstrap, React). Backend logic for applying discounts and recalculating the total cost. Integration with the product details page and checkout module.","title":"Dependencies"},{"location":"category_wise_product/","text":"Product Category Module 2. List Products by Category Description This endpoint retrieves a list of products based on the specified category. It allows users to browse products within a particular category. Method: GET Endpoint : /products/category/{category_id} Request Parameter Name Description Type Required category_id ID of the category to filter products Integer Yes token (Optional) User authentication token String No Response Status Code Description 200 Returns a list of products in the specified category 400 {\"error\": \"Invalid category ID\"} 404 {\"error\": \"Category not found\"} 401 {\"error\": \"Unauthorized access, invalid token\"}","title":"Category Wise Product"},{"location":"category_wise_product/#product-category-module","text":"","title":"Product Category Module"},{"location":"category_wise_product/#2-list-products-by-category","text":"","title":"2. List Products by Category"},{"location":"category_wise_product/#description","text":"This endpoint retrieves a list of products based on the specified category. It allows users to browse products within a particular category.","title":"Description"},{"location":"category_wise_product/#method-get","text":"Endpoint : /products/category/{category_id}","title":"Method: GET"},{"location":"category_wise_product/#request","text":"Parameter Name Description Type Required category_id ID of the category to filter products Integer Yes token (Optional) User authentication token String No","title":"Request"},{"location":"category_wise_product/#response","text":"Status Code Description 200 Returns a list of products in the specified category 400 {\"error\": \"Invalid category ID\"} 404 {\"error\": \"Category not found\"} 401 {\"error\": \"Unauthorized access, invalid token\"}","title":"Response"},{"location":"category_wise_product_locaton/","text":"Product Location & Category Module 3. List Products by Category and Location Description This endpoint retrieves a list of products within a specified category and location, allowing users to find products available in their region. Method: GET Endpoint : /products/category/{category_id}/location/{location_id} Request Parameter Name Description Type Required category_id ID of the category to filter products Integer Yes location_id ID of the location to filter products Integer Yes token (Optional) User authentication token String No Response Status Code Description 200 Returns a list of products in the specified category and location 400 {\"error\": \"Invalid category or location ID\"} 404 {\"error\": \"No products found for the given criteria\"} 401 {\"error\": \"Unauthorized access, invalid token\"}","title":"Category Wise Product Location"},{"location":"category_wise_product_locaton/#product-location-category-module","text":"","title":"Product Location &amp; Category Module"},{"location":"category_wise_product_locaton/#3-list-products-by-category-and-location","text":"","title":"3. List Products by Category and Location"},{"location":"category_wise_product_locaton/#description","text":"This endpoint retrieves a list of products within a specified category and location, allowing users to find products available in their region.","title":"Description"},{"location":"category_wise_product_locaton/#method-get","text":"Endpoint : /products/category/{category_id}/location/{location_id}","title":"Method: GET"},{"location":"category_wise_product_locaton/#request","text":"Parameter Name Description Type Required category_id ID of the category to filter products Integer Yes location_id ID of the location to filter products Integer Yes token (Optional) User authentication token String No","title":"Request"},{"location":"category_wise_product_locaton/#response","text":"Status Code Description 200 Returns a list of products in the specified category and location 400 {\"error\": \"Invalid category or location ID\"} 404 {\"error\": \"No products found for the given criteria\"} 401 {\"error\": \"Unauthorized access, invalid token\"}","title":"Response"},{"location":"delivary_audhentication/","text":"Module 1: Delivery Partner Authentication Purpose Provides secure login and logout functionality for delivery partners to access their tasks and manage assigned orders. Features Login: Secure login system for delivery partners using email and password. Input validation for authentication credentials. Error handling for incorrect login attempts. Support for password reset via email. Logout: Simple logout functionality to terminate active sessions securely. Session management to ensure account security. Dependencies Django's built-in authentication system. Email service for password reset functionality. Frontend components for login/logout pages","title":"Audhentication"},{"location":"delivary_audhentication/#module-1-delivery-partner-authentication","text":"","title":"Module 1: Delivery Partner Authentication"},{"location":"delivary_audhentication/#purpose","text":"Provides secure login and logout functionality for delivery partners to access their tasks and manage assigned orders.","title":"Purpose"},{"location":"delivary_audhentication/#features","text":"Login: Secure login system for delivery partners using email and password. Input validation for authentication credentials. Error handling for incorrect login attempts. Support for password reset via email. Logout: Simple logout functionality to terminate active sessions securely. Session management to ensure account security.","title":"Features"},{"location":"delivary_audhentication/#dependencies","text":"Django's built-in authentication system. Email service for password reset functionality. Frontend components for login/logout pages","title":"Dependencies"},{"location":"delivary_opearions/","text":"Module 2: Delivery Partner Task Management Purpose Allows delivery partners to efficiently manage daily tasks, update order statuses, complete assigned deliveries, and verify user requests to sell unique products. Features Task Overview: Display a list of tasks assigned for the day, including: Delivery orders with details like address, contact information, and product specifics. Verification requests for user-submitted products. Sort and filter tasks by priority or type (e.g., deliveries vs. verification). Order Updates: Update the status of assigned orders: Pending, Dispatched, Out for Delivery, Delivered. Provide notes for delayed or incomplete deliveries. Mark orders as \"Completed\" once successfully delivered. Verification Requests: View and verify requests from users to sell unique products: Review the proof and history of the product. Submit approval or rejection of the request. Add comments or feedback for the admin or user if necessary. Task Completion: Mark tasks as \"Completed\" after successfully finishing them. Notify admins of completed verifications or deliveries. Notifications: Receive real-time notifications for new tasks or updates. Alerts for high-priority tasks or deadlines. Dependencies Django models for storing task data and order status. APIs for real-time task updates and notifications. Frontend interface for displaying and managing tasks Backend logic for verifying products and managing task workflows.","title":"Operations"},{"location":"delivary_opearions/#module-2-delivery-partner-task-management","text":"","title":"Module 2: Delivery Partner Task Management"},{"location":"delivary_opearions/#purpose","text":"Allows delivery partners to efficiently manage daily tasks, update order statuses, complete assigned deliveries, and verify user requests to sell unique products.","title":"Purpose"},{"location":"delivary_opearions/#features","text":"Task Overview: Display a list of tasks assigned for the day, including: Delivery orders with details like address, contact information, and product specifics. Verification requests for user-submitted products. Sort and filter tasks by priority or type (e.g., deliveries vs. verification). Order Updates: Update the status of assigned orders: Pending, Dispatched, Out for Delivery, Delivered. Provide notes for delayed or incomplete deliveries. Mark orders as \"Completed\" once successfully delivered. Verification Requests: View and verify requests from users to sell unique products: Review the proof and history of the product. Submit approval or rejection of the request. Add comments or feedback for the admin or user if necessary. Task Completion: Mark tasks as \"Completed\" after successfully finishing them. Notify admins of completed verifications or deliveries. Notifications: Receive real-time notifications for new tasks or updates. Alerts for high-priority tasks or deadlines.","title":"Features"},{"location":"delivary_opearions/#dependencies","text":"Django models for storing task data and order status. APIs for real-time task updates and notifications. Frontend interface for displaying and managing tasks Backend logic for verifying products and managing task workflows.","title":"Dependencies"},{"location":"finding_catogory/","text":"Problem with Having Categories in Geo-Specific Products When developing an e-commerce platform that deals with geo-specific products, one of the challenges is effectively categorizing products based on geographical locations. Geo-specific products are items that are either unique to or particularly popular in specific regions, such as locally-produced goods or region-based services. Having categories for these products can present several issues: Dynamic Nature of Categories : Geo-specific categories can change based on location, seasons, or shifting consumer demand, making it difficult to manage static categories. Overlapping Categories : Some products may fit into multiple geo-specific categories, creating confusion when a user is trying to filter products by category. User Experience : Users may struggle to navigate through multiple geo-location based categories, leading to a less intuitive shopping experience. Inventory Management : For sellers, managing stock across different geographical categories can be complex, especially when dealing with location-specific products that have limited availability or shipping restrictions. Addressing these challenges is key to providing a seamless and efficient experience for both customers and merchants in geo-specific product categories. Top 10 Possible Categories for Geo-Specific Products Local Handicrafts Traditional handmade products specific to a region, such as pottery, textiles, and jewelry. Regional Foods & Spices Unique food items or spices that are sourced from specific areas, like regional snacks, condiments, and organic produce. Herbal Products Local herbal remedies, wellness products, and organic skincare items that are native to specific regions. Art & Collectibles Regional art pieces, paintings, sculptures, and collectible items that reflect local culture and heritage. Fashion & Apparel Clothing and accessories specific to a region, including traditional attire, seasonal fashion, and locally designed styles. Local Beverages Specialty beverages like teas, coffees, wines, or locally produced drinks that are specific to a region. Outdoor & Adventure Gear Products for outdoor activities, hiking, or adventure sports unique to certain geographical areas or landscapes. Eco-Friendly & Sustainable Goods Products made using local, sustainable materials, such as bamboo, recycled fabrics, and organic cotton from specific regions. Home D\u00e9cor Furniture, textiles, and home accessories that are influenced by local craftsmanship or natural resources unique to the region. Souvenirs & Gifts Travel-specific items, souvenirs, and gift items that reflect the culture or heritage of a particular area. Conclusion Given the vast range of category options for geo-specific products, it is crucial to provide flexibility for administrators to manage these categories efficiently. To streamline the process and enhance the user experience, I am planning to implement a feature on the admin side that will allow administrators to easily add new categories and insert products into these categories . This will ensure better organization, enable dynamic updates, and allow for a more scalable approach as new geo-specific products and regions are introduced. By providing this functionality, the admin can maintain a smooth workflow in managing diverse product types, ensuring that each product is correctly categorized and accessible to the right customer base.","title":"Category"},{"location":"finding_catogory/#problem-with-having-categories-in-geo-specific-products","text":"When developing an e-commerce platform that deals with geo-specific products, one of the challenges is effectively categorizing products based on geographical locations. Geo-specific products are items that are either unique to or particularly popular in specific regions, such as locally-produced goods or region-based services. Having categories for these products can present several issues: Dynamic Nature of Categories : Geo-specific categories can change based on location, seasons, or shifting consumer demand, making it difficult to manage static categories. Overlapping Categories : Some products may fit into multiple geo-specific categories, creating confusion when a user is trying to filter products by category. User Experience : Users may struggle to navigate through multiple geo-location based categories, leading to a less intuitive shopping experience. Inventory Management : For sellers, managing stock across different geographical categories can be complex, especially when dealing with location-specific products that have limited availability or shipping restrictions. Addressing these challenges is key to providing a seamless and efficient experience for both customers and merchants in geo-specific product categories.","title":"Problem with Having Categories in Geo-Specific Products"},{"location":"finding_catogory/#top-10-possible-categories-for-geo-specific-products","text":"Local Handicrafts Traditional handmade products specific to a region, such as pottery, textiles, and jewelry. Regional Foods & Spices Unique food items or spices that are sourced from specific areas, like regional snacks, condiments, and organic produce. Herbal Products Local herbal remedies, wellness products, and organic skincare items that are native to specific regions. Art & Collectibles Regional art pieces, paintings, sculptures, and collectible items that reflect local culture and heritage. Fashion & Apparel Clothing and accessories specific to a region, including traditional attire, seasonal fashion, and locally designed styles. Local Beverages Specialty beverages like teas, coffees, wines, or locally produced drinks that are specific to a region. Outdoor & Adventure Gear Products for outdoor activities, hiking, or adventure sports unique to certain geographical areas or landscapes. Eco-Friendly & Sustainable Goods Products made using local, sustainable materials, such as bamboo, recycled fabrics, and organic cotton from specific regions. Home D\u00e9cor Furniture, textiles, and home accessories that are influenced by local craftsmanship or natural resources unique to the region. Souvenirs & Gifts Travel-specific items, souvenirs, and gift items that reflect the culture or heritage of a particular area.","title":"Top 10 Possible Categories for Geo-Specific Products"},{"location":"finding_catogory/#conclusion","text":"Given the vast range of category options for geo-specific products, it is crucial to provide flexibility for administrators to manage these categories efficiently. To streamline the process and enhance the user experience, I am planning to implement a feature on the admin side that will allow administrators to easily add new categories and insert products into these categories . This will ensure better organization, enable dynamic updates, and allow for a more scalable approach as new geo-specific products and regions are introduced. By providing this functionality, the admin can maintain a smooth workflow in managing diverse product types, ensuring that each product is correctly categorized and accessible to the right customer base.","title":"Conclusion"},{"location":"finding_products/","text":"Problem with Finding Location-Specific Products Finding new products for the project has been a challenging task, as every product needs to have a strong traditional or cultural relationship with a specific location. This requirement adds a layer of complexity, as not all products are clearly categorized based on geographic or cultural relevance. To address this challenge, I have implemented a system that allows users to inform the platform about geo-specific products available in their region. This system enables users to submit details about locally unique or culturally significant products, which are then reviewed and added to the platform. By incorporating user input, we ensure that the products listed reflect the true cultural and regional significance, providing a more accurate and diverse catalog. This user-driven approach helps overcome the challenge of sourcing location-specific products, ensuring that the platform can showcase authentic, geographically relevant items while maintaining an engaging experience for customers. Region-Specific Traditional and Cultural Products from Kerala's 14 Districts Here\u2019s a list of three unique products from each of Kerala\u2019s 14 districts, showcasing their traditional and cultural significance. 1. Thiruvananthapuram Kasavu Sarees : Traditional handwoven sarees with gold borders. Aranmula Kannadi : Unique metal-alloy mirrors, crafted traditionally. Chirayinkeezhu Coir Mats : Handwoven mats using natural coir fiber. 2. Kollam Kollam Cashew : High-quality cashew nuts, a major export product. Kollam Clay Idols : Traditional clay sculptures for festivals. Screw Pine Mats : Handwoven mats made from screw pine leaves. 3. Pathanamthitta Aranmula Boat Models : Miniature versions of traditional snake boats. Pathanamthitta Bell Metal Lamps : Handmade brass lamps. Vazhappally Wooden Toys : Intricately carved wooden toys. 4. Alappuzha Coir Products : Mats, rugs, and ropes made from coconut fiber. Alleppey Prawns : Freshwater prawns, a culinary specialty. Traditional Houseboat Models : Miniature models of Kerala houseboats. 5. Kottayam Kottayam Rubber Products : Items made from natural rubber. Mural Paintings : Traditional temple art with religious themes. Kumarakom Karimeen (Pearl Spot Fish) : A delicacy of backwater cuisine. 6. Idukki Idukki Spices : Cardamom, black pepper, and nutmeg. Hill Honey : Organic honey collected from the Western Ghats. Tribal Handicrafts : Baskets, mats, and jewelry made by local tribes. 7. Ernakulam Jew Town Antiques : Rare artifacts and collectibles. Pappadams : Thin, crispy traditional snacks. Kaloor Wooden Furniture : Handmade traditional wooden furniture. 8. Thrissur Chenda (Percussion Instrument) : Integral to Kerala\u2019s classical music. Thrissur Gold Jewelry : Traditional ornaments with intricate designs. Pookkalam Designs : Floral rangoli art during Onam. 9. Palakkad Palakkad Matta Rice : Famous red rice variety. Kumaranalloor Brass Lamps : Traditional oil lamps. Thanjavur Dolls : Bobblehead-style traditional figurines. 10. Malappuram Aruvacode Clay Pottery : Traditional clay pots and artifacts. Malabar Biryani Spices : Unique spice blend for biryani. Nilambur Teakwood Products : Furniture and carvings from teakwood. 11. Kozhikode Calicut Halwa : A popular sweet made from coconut and jaggery. Thikkodi Handloom : Handwoven fabrics known for their durability. Bamboo Products : Eco-friendly items like baskets and mats. 12. Wayanad Wayanad Coffee : Premium-quality coffee beans. Tribal Jewelry : Handmade ornaments with natural materials. Pepper Spray Handicrafts : Unique crafts incorporating pepper vines. 13. Kannur Kannur Handlooms : World-famous for their quality and design. Thalassery Biryani Masala : Special blend for Thalassery biryani. Ritual Masks : Used in Theyyam, a traditional art form. 14. Kasaragod Kasaragod Sarees : Unique handwoven sarees with distinct patterns. Yakshagana Masks : Traditional dance-drama masks. Mangalore Tiles : Terracotta tiles with a distinct red hue. This diverse product range highlights Kerala's rich heritage and cultural diversity, ensuring that each district's unique identity is represented.","title":"Finding Products"},{"location":"finding_products/#problem-with-finding-location-specific-products","text":"Finding new products for the project has been a challenging task, as every product needs to have a strong traditional or cultural relationship with a specific location. This requirement adds a layer of complexity, as not all products are clearly categorized based on geographic or cultural relevance. To address this challenge, I have implemented a system that allows users to inform the platform about geo-specific products available in their region. This system enables users to submit details about locally unique or culturally significant products, which are then reviewed and added to the platform. By incorporating user input, we ensure that the products listed reflect the true cultural and regional significance, providing a more accurate and diverse catalog. This user-driven approach helps overcome the challenge of sourcing location-specific products, ensuring that the platform can showcase authentic, geographically relevant items while maintaining an engaging experience for customers.","title":"Problem with Finding Location-Specific Products"},{"location":"finding_products/#region-specific-traditional-and-cultural-products-from-keralas-14-districts","text":"Here\u2019s a list of three unique products from each of Kerala\u2019s 14 districts, showcasing their traditional and cultural significance.","title":"Region-Specific Traditional and Cultural Products from Kerala's 14 Districts"},{"location":"finding_products/#1-thiruvananthapuram","text":"Kasavu Sarees : Traditional handwoven sarees with gold borders. Aranmula Kannadi : Unique metal-alloy mirrors, crafted traditionally. Chirayinkeezhu Coir Mats : Handwoven mats using natural coir fiber.","title":"1. Thiruvananthapuram"},{"location":"finding_products/#2-kollam","text":"Kollam Cashew : High-quality cashew nuts, a major export product. Kollam Clay Idols : Traditional clay sculptures for festivals. Screw Pine Mats : Handwoven mats made from screw pine leaves.","title":"2. Kollam"},{"location":"finding_products/#3-pathanamthitta","text":"Aranmula Boat Models : Miniature versions of traditional snake boats. Pathanamthitta Bell Metal Lamps : Handmade brass lamps. Vazhappally Wooden Toys : Intricately carved wooden toys.","title":"3. Pathanamthitta"},{"location":"finding_products/#4-alappuzha","text":"Coir Products : Mats, rugs, and ropes made from coconut fiber. Alleppey Prawns : Freshwater prawns, a culinary specialty. Traditional Houseboat Models : Miniature models of Kerala houseboats.","title":"4. Alappuzha"},{"location":"finding_products/#5-kottayam","text":"Kottayam Rubber Products : Items made from natural rubber. Mural Paintings : Traditional temple art with religious themes. Kumarakom Karimeen (Pearl Spot Fish) : A delicacy of backwater cuisine.","title":"5. Kottayam"},{"location":"finding_products/#6-idukki","text":"Idukki Spices : Cardamom, black pepper, and nutmeg. Hill Honey : Organic honey collected from the Western Ghats. Tribal Handicrafts : Baskets, mats, and jewelry made by local tribes.","title":"6. Idukki"},{"location":"finding_products/#7-ernakulam","text":"Jew Town Antiques : Rare artifacts and collectibles. Pappadams : Thin, crispy traditional snacks. Kaloor Wooden Furniture : Handmade traditional wooden furniture.","title":"7. Ernakulam"},{"location":"finding_products/#8-thrissur","text":"Chenda (Percussion Instrument) : Integral to Kerala\u2019s classical music. Thrissur Gold Jewelry : Traditional ornaments with intricate designs. Pookkalam Designs : Floral rangoli art during Onam.","title":"8. Thrissur"},{"location":"finding_products/#9-palakkad","text":"Palakkad Matta Rice : Famous red rice variety. Kumaranalloor Brass Lamps : Traditional oil lamps. Thanjavur Dolls : Bobblehead-style traditional figurines.","title":"9. Palakkad"},{"location":"finding_products/#10-malappuram","text":"Aruvacode Clay Pottery : Traditional clay pots and artifacts. Malabar Biryani Spices : Unique spice blend for biryani. Nilambur Teakwood Products : Furniture and carvings from teakwood.","title":"10. Malappuram"},{"location":"finding_products/#11-kozhikode","text":"Calicut Halwa : A popular sweet made from coconut and jaggery. Thikkodi Handloom : Handwoven fabrics known for their durability. Bamboo Products : Eco-friendly items like baskets and mats.","title":"11. Kozhikode"},{"location":"finding_products/#12-wayanad","text":"Wayanad Coffee : Premium-quality coffee beans. Tribal Jewelry : Handmade ornaments with natural materials. Pepper Spray Handicrafts : Unique crafts incorporating pepper vines.","title":"12. Wayanad"},{"location":"finding_products/#13-kannur","text":"Kannur Handlooms : World-famous for their quality and design. Thalassery Biryani Masala : Special blend for Thalassery biryani. Ritual Masks : Used in Theyyam, a traditional art form.","title":"13. Kannur"},{"location":"finding_products/#14-kasaragod","text":"Kasaragod Sarees : Unique handwoven sarees with distinct patterns. Yakshagana Masks : Traditional dance-drama masks. Mangalore Tiles : Terracotta tiles with a distinct red hue. This diverse product range highlights Kerala's rich heritage and cultural diversity, ensuring that each district's unique identity is represented.","title":"14. Kasaragod"},{"location":"home/","text":"Module 3: Home Page / Discover Section Purpose Displays products by highlighting featured, trending, and region-specific products, while showcasing categories and regions prominently. Features Display featured products at the top of the page. Showcase trending products based on popularity or user interactions. Highlight region-specific products based on the user's location or selected region. Display product categories with visual emphasis for easier navigation. Include a search bar for discovering products by category, region, or keyword. Dependencies Django models for product data, categories, and regions. Frontend components Bootsrap for displaying products and categories . Caching mechanism for improving performance with frequently accessed products.","title":"Home Section"},{"location":"home/#module-3-home-page-discover-section","text":"","title":"Module 3: Home Page / Discover Section"},{"location":"home/#purpose","text":"Displays products by highlighting featured, trending, and region-specific products, while showcasing categories and regions prominently.","title":"Purpose"},{"location":"home/#features","text":"Display featured products at the top of the page. Showcase trending products based on popularity or user interactions. Highlight region-specific products based on the user's location or selected region. Display product categories with visual emphasis for easier navigation. Include a search bar for discovering products by category, region, or keyword.","title":"Features"},{"location":"home/#dependencies","text":"Django models for product data, categories, and regions. Frontend components Bootsrap for displaying products and categories . Caching mechanism for improving performance with frequently accessed products.","title":"Dependencies"},{"location":"payment/","text":"Module 8: Checkout and Payments Purpose Facilitates the purchase process by allowing users to confirm their orders, select a delivery address, and choose from various payment options. Features Display saved addresses for selection. Option to add a new delivery address during checkout. Cash on Delivery (COD) option. Digital payment methods (e.g., credit/debit cards, UPI, wallets). Display the list of items in the order with quantity and price details. Show total cost, including applicable taxes, discounts, and delivery charges. Allow users to review all details and confirm the order. Generate an order ID for tracking purposes. Secure payment processing for digital payments. Dependencies Django models for orders, delivery addresses, and payment transactions. Integration with payment gateways (e.g., Razorpay, PayPal, Stripe). Backend logic for calculating final prices and applying discounts. Frontend components for a responsive checkout interface. Integration with the shopping cart module for transferring items to the order summary.","title":"Payment"},{"location":"payment/#module-8-checkout-and-payments","text":"","title":"Module 8: Checkout and Payments"},{"location":"payment/#purpose","text":"Facilitates the purchase process by allowing users to confirm their orders, select a delivery address, and choose from various payment options.","title":"Purpose"},{"location":"payment/#features","text":"Display saved addresses for selection. Option to add a new delivery address during checkout. Cash on Delivery (COD) option. Digital payment methods (e.g., credit/debit cards, UPI, wallets). Display the list of items in the order with quantity and price details. Show total cost, including applicable taxes, discounts, and delivery charges. Allow users to review all details and confirm the order. Generate an order ID for tracking purposes. Secure payment processing for digital payments.","title":"Features"},{"location":"payment/#dependencies","text":"Django models for orders, delivery addresses, and payment transactions. Integration with payment gateways (e.g., Razorpay, PayPal, Stripe). Backend logic for calculating final prices and applying discounts. Frontend components for a responsive checkout interface. Integration with the shopping cart module for transferring items to the order summary.","title":"Dependencies"},{"location":"product_details/","text":"Module 5: Product Details Page Purpose Provides a detailed view of a product, including its description, reviews, and options to interact with the product (e.g., add to cart, wishlist). Features Display complete product details, including: Product name, images, and price. Ratings and user reviews. Cultural or traditional background information about the product. Show a \"Users also bought\" section with related or recommended products. Provide options for: Adding the product to the cart. Adding the product to the wishlist. Immediate purchase with a \"Buy Now\" button. Allow users to submit reviews and ratings for the product. Highlight product availability and delivery options based on the user\u2019s location. Dependencies Django models for product details, reviews, and user interactions (e.g., cart, wishlist). File storage system for product images (e.g., local or cloud-based storage). Frontend components for a dynamic product page. Review and rating system to manage user feedback. Integration with the shopping cart module.","title":"Prodcuct Details"},{"location":"product_details/#module-5-product-details-page","text":"","title":"Module 5: Product Details Page"},{"location":"product_details/#purpose","text":"Provides a detailed view of a product, including its description, reviews, and options to interact with the product (e.g., add to cart, wishlist).","title":"Purpose"},{"location":"product_details/#features","text":"Display complete product details, including: Product name, images, and price. Ratings and user reviews. Cultural or traditional background information about the product. Show a \"Users also bought\" section with related or recommended products. Provide options for: Adding the product to the cart. Adding the product to the wishlist. Immediate purchase with a \"Buy Now\" button. Allow users to submit reviews and ratings for the product. Highlight product availability and delivery options based on the user\u2019s location.","title":"Features"},{"location":"product_details/#dependencies","text":"Django models for product details, reviews, and user interactions (e.g., cart, wishlist). File storage system for product images (e.g., local or cloud-based storage). Frontend components for a dynamic product page. Review and rating system to manage user feedback. Integration with the shopping cart module.","title":"Dependencies"},{"location":"product_listing/","text":"Module 4: Product Listing Page Purpose Provides a comprehensive view of products with filtering and search functionalities to help users find desired items efficiently. Features Display a list of products with essential details (e.g., name, price, rating, location). Filter products by: Category. Rating. Price range. Location. Implement a search bar for finding products by name or keywords. Pagination for navigating through large lists of products. Sorting options (e.g., price: low to high, rating: high to low). Dependencies Django models for product data, categories, ratings, and locations. Django ORM for querying filtered and sorted product data. Frontend components for displaying the product list and filters (e.g., Bootstrap, React). Search functionality powered by Django QuerySet or a search library (e.g., Django Haystack with Elasticsearch).","title":"Prodcuct Listing"},{"location":"product_listing/#module-4-product-listing-page","text":"","title":"Module 4: Product Listing Page"},{"location":"product_listing/#purpose","text":"Provides a comprehensive view of products with filtering and search functionalities to help users find desired items efficiently.","title":"Purpose"},{"location":"product_listing/#features","text":"Display a list of products with essential details (e.g., name, price, rating, location). Filter products by: Category. Rating. Price range. Location. Implement a search bar for finding products by name or keywords. Pagination for navigating through large lists of products. Sorting options (e.g., price: low to high, rating: high to low).","title":"Features"},{"location":"product_listing/#dependencies","text":"Django models for product data, categories, ratings, and locations. Django ORM for querying filtered and sorted product data. Frontend components for displaying the product list and filters (e.g., Bootstrap, React). Search functionality powered by Django QuerySet or a search library (e.g., Django Haystack with Elasticsearch).","title":"Dependencies"},{"location":"profile/","text":"Module 2: Profile Management Purpose Handles the user profile section, including personal details and address management. Features View and update personal details (e.g., name, email, phone number). Manage address information (e.g., add, edit, delete addresses). Profile picture upload and update functionality. Option to set default address for orders or communication. Dependencies Django models for storing profile data. File storage system for profile pictures (e.g., local storage or cloud-based storage like AWS S3). Form validation for user inputs.","title":"Profile management"},{"location":"profile/#module-2-profile-management","text":"","title":"Module 2: Profile Management"},{"location":"profile/#purpose","text":"Handles the user profile section, including personal details and address management.","title":"Purpose"},{"location":"profile/#features","text":"View and update personal details (e.g., name, email, phone number). Manage address information (e.g., add, edit, delete addresses). Profile picture upload and update functionality. Option to set default address for orders or communication.","title":"Features"},{"location":"profile/#dependencies","text":"Django models for storing profile data. File storage system for profile pictures (e.g., local storage or cloud-based storage like AWS S3). Form validation for user inputs.","title":"Dependencies"},{"location":"user_account_access/","text":"User Account Management Module Description This endpoint allows users to view and update their account details, such as their name, email, and other profile information. 1. Get User Account Details Method: GET Endpoint : /user-account Request Headers: Header Name Description Type Authorization JWT Token for authentication String Response Status Code Description 200 {\"message\": \"User details fetched successfully\", \"data\": {user details}} 401 {\"error\": \"Unauthorized. Please provide a valid token.\"} 500 {\"error\": \"Server error. Please try again later.\"} Example Request Headers: ```http Authorization: Bearer JWT_TOKEN","title":"User Account Access"},{"location":"user_account_access/#user-account-management-module","text":"","title":"User Account Management Module"},{"location":"user_account_access/#description","text":"This endpoint allows users to view and update their account details, such as their name, email, and other profile information.","title":"Description"},{"location":"user_account_access/#1-get-user-account-details","text":"","title":"1. Get User Account Details"},{"location":"user_account_access/#method-get","text":"Endpoint : /user-account","title":"Method: GET"},{"location":"user_account_access/#request","text":"Headers: Header Name Description Type Authorization JWT Token for authentication String","title":"Request"},{"location":"user_account_access/#response","text":"Status Code Description 200 {\"message\": \"User details fetched successfully\", \"data\": {user details}} 401 {\"error\": \"Unauthorized. Please provide a valid token.\"} 500 {\"error\": \"Server error. Please try again later.\"}","title":"Response"},{"location":"user_account_access/#example-request","text":"Headers: ```http Authorization: Bearer JWT_TOKEN","title":"Example Request"},{"location":"user_account_update/","text":"Update User Account Module Description This endpoint allows authenticated users to update their account details, including their name, email, and profile picture. Method: PUT Endpoint : /user-account Request Headers: Header Name Description Type Authorization JWT Token for authentication String Request Body: Parameter Name Description Type Length name User's full name String 3-50 chars email User's email address String Valid email profile_picture URL for the user's profile picture String URL (optional) Response Status Code Description 200 {\"message\": \"User details updated successfully\"} 400 {\"error\": \"Invalid data. Please check your input.\"} 401 {\"error\": \"Unauthorized. Please provide a valid token.\"} 500 {\"error\": \"Server error. Please try again later.\"} Example Request Headers: ```http Authorization: Bearer JWT_TOKEN","title":"User Account Update"},{"location":"user_account_update/#update-user-account-module","text":"","title":"Update User Account Module"},{"location":"user_account_update/#description","text":"This endpoint allows authenticated users to update their account details, including their name, email, and profile picture.","title":"Description"},{"location":"user_account_update/#method-put","text":"Endpoint : /user-account","title":"Method: PUT"},{"location":"user_account_update/#request","text":"Headers: Header Name Description Type Authorization JWT Token for authentication String Request Body: Parameter Name Description Type Length name User's full name String 3-50 chars email User's email address String Valid email profile_picture URL for the user's profile picture String URL (optional)","title":"Request"},{"location":"user_account_update/#response","text":"Status Code Description 200 {\"message\": \"User details updated successfully\"} 400 {\"error\": \"Invalid data. Please check your input.\"} 401 {\"error\": \"Unauthorized. Please provide a valid token.\"} 500 {\"error\": \"Server error. Please try again later.\"}","title":"Response"},{"location":"user_account_update/#example-request","text":"Headers: ```http Authorization: Bearer JWT_TOKEN","title":"Example Request"},{"location":"user_cart_add/","text":"Add Item to Cart Description This endpoint allows users to add a product to their cart. The user can specify the product and the desired quantity. Method: POST Endpoint : /cart Request Body Parameter Name Description Type Length product_id ID of the product Integer Required quantity Quantity of the product Integer Required Response Status Code Description 201 {\"message\": \"Item added to cart successfully\"} 400 {\"error\": \"Invalid product or quantity\"} 404 {\"error\": \"Product not found\"} 500 {\"error\": \"Server error. Please try again later.\"} Example Request Body ```json { \"product_id\": 101, \"quantity\": 2 }","title":"User Cart Add"},{"location":"user_cart_add/#add-item-to-cart","text":"","title":"Add Item to Cart"},{"location":"user_cart_add/#description","text":"This endpoint allows users to add a product to their cart. The user can specify the product and the desired quantity.","title":"Description"},{"location":"user_cart_add/#method-post","text":"Endpoint : /cart","title":"Method: POST"},{"location":"user_cart_add/#request-body","text":"Parameter Name Description Type Length product_id ID of the product Integer Required quantity Quantity of the product Integer Required","title":"Request Body"},{"location":"user_cart_add/#response","text":"Status Code Description 201 {\"message\": \"Item added to cart successfully\"} 400 {\"error\": \"Invalid product or quantity\"} 404 {\"error\": \"Product not found\"} 500 {\"error\": \"Server error. Please try again later.\"}","title":"Response"},{"location":"user_cart_add/#example-request-body","text":"```json { \"product_id\": 101, \"quantity\": 2 }","title":"Example Request Body"},{"location":"user_cart_delete/","text":"Delete Item from Cart Description This endpoint allows users to remove a specific item from their cart. No authentication or headers are required for this operation. Method: DELETE Endpoint : /cart/item/{item_id} Request Parameters: Parameter Name Description Type Required item_id ID of the cart item to delete Integer Yes Response Status Code Description 200 {\"message\": \"Item removed from cart successfully\"} 404 {\"error\": \"Item not found\"} 500 {\"error\": \"Server error. Please try again later.\"} Example Request Endpoint : /cart/item/123","title":"User Cart Delete"},{"location":"user_cart_delete/#delete-item-from-cart","text":"","title":"Delete Item from Cart"},{"location":"user_cart_delete/#description","text":"This endpoint allows users to remove a specific item from their cart. No authentication or headers are required for this operation.","title":"Description"},{"location":"user_cart_delete/#method-delete","text":"Endpoint : /cart/item/{item_id}","title":"Method: DELETE"},{"location":"user_cart_delete/#request","text":"Parameters: Parameter Name Description Type Required item_id ID of the cart item to delete Integer Yes","title":"Request"},{"location":"user_cart_delete/#response","text":"Status Code Description 200 {\"message\": \"Item removed from cart successfully\"} 404 {\"error\": \"Item not found\"} 500 {\"error\": \"Server error. Please try again later.\"}","title":"Response"},{"location":"user_cart_delete/#example-request","text":"Endpoint : /cart/item/123","title":"Example Request"},{"location":"user_cart_page/","text":"Cart Page Module Description This endpoint allows users to view and manage the items in their shopping cart. It includes functionality to view the cart, add items, remove items, and update quantities. 1. View Cart Method: GET Endpoint : /cart Request Headers: Header Name Description Type Authorization JWT Token for authentication String Response Status Code Description 200 {\"message\": \"Cart details fetched successfully\", \"data\": {cart items}} 401 {\"error\": \"Unauthorized. Please provide a valid token.\"} 404 {\"error\": \"Cart not found\"} 500 {\"error\": \"Server error. Please try again later.\"} Example Request Headers: ```http Authorization: Bearer JWT_TOKEN","title":"User Cart Page"},{"location":"user_cart_page/#cart-page-module","text":"","title":"Cart Page Module"},{"location":"user_cart_page/#description","text":"This endpoint allows users to view and manage the items in their shopping cart. It includes functionality to view the cart, add items, remove items, and update quantities.","title":"Description"},{"location":"user_cart_page/#1-view-cart","text":"","title":"1. View Cart"},{"location":"user_cart_page/#method-get","text":"Endpoint : /cart","title":"Method: GET"},{"location":"user_cart_page/#request","text":"Headers: Header Name Description Type Authorization JWT Token for authentication String","title":"Request"},{"location":"user_cart_page/#response","text":"Status Code Description 200 {\"message\": \"Cart details fetched successfully\", \"data\": {cart items}} 401 {\"error\": \"Unauthorized. Please provide a valid token.\"} 404 {\"error\": \"Cart not found\"} 500 {\"error\": \"Server error. Please try again later.\"}","title":"Response"},{"location":"user_cart_page/#example-request","text":"Headers: ```http Authorization: Bearer JWT_TOKEN","title":"Example Request"},{"location":"user_cart_update/","text":"Update Cart Item Quantity Description This endpoint allows users to update the quantity of items in their cart. It can also handle additional parameters such as size, color, or other product-specific options that might be associated with the cart item. Method: PUT Endpoint : /cart/update/{item_id} Request Body Parameter Name Description Type Required product_id ID of the product in the cart Integer Yes quantity Quantity of the product Integer Yes size Size of the product (if applicable) String No color Color of the product (if applicable) String No note Additional notes or requests String No Response Status Code Description 200 {\"message\": \"Cart item updated successfully\"} 400 {\"error\": \"Invalid request parameters\"} 401 {\"error\": \"Unauthorized. Please provide a valid token.\"} 404 {\"error\": \"Cart item not found\"} 500 {\"error\": \"Server error. Please try again later.\"}","title":"User Cart Update"},{"location":"user_cart_update/#update-cart-item-quantity","text":"","title":"Update Cart Item Quantity"},{"location":"user_cart_update/#description","text":"This endpoint allows users to update the quantity of items in their cart. It can also handle additional parameters such as size, color, or other product-specific options that might be associated with the cart item.","title":"Description"},{"location":"user_cart_update/#method-put","text":"Endpoint : /cart/update/{item_id}","title":"Method: PUT"},{"location":"user_cart_update/#request-body","text":"Parameter Name Description Type Required product_id ID of the product in the cart Integer Yes quantity Quantity of the product Integer Yes size Size of the product (if applicable) String No color Color of the product (if applicable) String No note Additional notes or requests String No","title":"Request Body"},{"location":"user_cart_update/#response","text":"Status Code Description 200 {\"message\": \"Cart item updated successfully\"} 400 {\"error\": \"Invalid request parameters\"} 401 {\"error\": \"Unauthorized. Please provide a valid token.\"} 404 {\"error\": \"Cart item not found\"} 500 {\"error\": \"Server error. Please try again later.\"}","title":"Response"},{"location":"user_check_out/","text":"Checkout Module 4. Checkout Page Description This endpoint retrieves the details of the user's cart, calculates the total cost (including taxes, discounts, etc.), and allows the user to proceed to payment. Method: GET Endpoint : cart/checkout Request Parameter Name Description Type Required token User authentication token String Yes","title":"User Check Out"},{"location":"user_check_out/#checkout-module","text":"","title":"Checkout Module"},{"location":"user_check_out/#4-checkout-page","text":"","title":"4. Checkout Page"},{"location":"user_check_out/#description","text":"This endpoint retrieves the details of the user's cart, calculates the total cost (including taxes, discounts, etc.), and allows the user to proceed to payment.","title":"Description"},{"location":"user_check_out/#method-get","text":"Endpoint : cart/checkout","title":"Method: GET"},{"location":"user_check_out/#request","text":"Parameter Name Description Type Required token User authentication token String Yes","title":"Request"},{"location":"user_database/","text":"User/Admin-Side Database Design The user-side of the database design focuses on capturing and managing all user-related data and their interactions within the system. It serves as the foundation for key functionalities like: User registration Profile management Personalized user experiences such as shopping, order tracking, and wishlisting This design is structured to ensure seamless data flow and efficient retrieval of information across multiple modules. Below is an outline of how the user-side data is organized:","title":"User/Admin"},{"location":"user_database/#useradmin-side-database-design","text":"The user-side of the database design focuses on capturing and managing all user-related data and their interactions within the system. It serves as the foundation for key functionalities like: User registration Profile management Personalized user experiences such as shopping, order tracking, and wishlisting This design is structured to ensure seamless data flow and efficient retrieval of information across multiple modules. Below is an outline of how the user-side data is organized:","title":"User/Admin-Side Database Design"},{"location":"user_feedback/","text":"Contact Module 4. Submit Contact Form Description This endpoint allows users to submit inquiries, feedback, or support requests through a contact form. Method: POST Endpoint : /contact Request Parameter Name Description Type Required name User's full name String Yes email User's email address String Yes subject Subject of the message String Yes message The message body String Yes token (Optional) User authentication token String No Response Status Code Description 201 {\"message\": \"Your inquiry has been submitted successfully\"} 400 {\"error\": \"Invalid data provided\"} 500 {\"error\": \"Internal server error\"}","title":"User Contact"},{"location":"user_feedback/#contact-module","text":"","title":"Contact Module"},{"location":"user_feedback/#4-submit-contact-form","text":"","title":"4. Submit Contact Form"},{"location":"user_feedback/#description","text":"This endpoint allows users to submit inquiries, feedback, or support requests through a contact form.","title":"Description"},{"location":"user_feedback/#method-post","text":"Endpoint : /contact","title":"Method: POST"},{"location":"user_feedback/#request","text":"Parameter Name Description Type Required name User's full name String Yes email User's email address String Yes subject Subject of the message String Yes message The message body String Yes token (Optional) User authentication token String No","title":"Request"},{"location":"user_feedback/#response","text":"Status Code Description 201 {\"message\": \"Your inquiry has been submitted successfully\"} 400 {\"error\": \"Invalid data provided\"} 500 {\"error\": \"Internal server error\"}","title":"Response"},{"location":"user_landing_page/","text":"User Landing Page Module 1. Landing Page (Homepage) Description This endpoint serves the homepage (landing page) of the website where users can find general information, navigation to other sections, and products or services offered by the platform. Method: GET Endpoint : /landing-page Request Parameter Name Description Type Length token (Optional) User authentication token String N/A Note: The token parameter is optional for accessing the public landing page, but may be used for personalized content or user-specific data. Response Status Code Description 200 Returns the content for the homepage 401 {\"error\": \"Unauthorized access, invalid token\"} 404 {\"error\": \"Page not found\"} Example Request Query Parameters: ```http GET /landing-page","title":"User Landing Page"},{"location":"user_landing_page/#user-landing-page-module","text":"","title":"User Landing Page Module"},{"location":"user_landing_page/#1-landing-page-homepage","text":"","title":"1. Landing Page (Homepage)"},{"location":"user_landing_page/#description","text":"This endpoint serves the homepage (landing page) of the website where users can find general information, navigation to other sections, and products or services offered by the platform.","title":"Description"},{"location":"user_landing_page/#method-get","text":"Endpoint : /landing-page","title":"Method: GET"},{"location":"user_landing_page/#request","text":"Parameter Name Description Type Length token (Optional) User authentication token String N/A Note: The token parameter is optional for accessing the public landing page, but may be used for personalized content or user-specific data.","title":"Request"},{"location":"user_landing_page/#response","text":"Status Code Description 200 Returns the content for the homepage 401 {\"error\": \"Unauthorized access, invalid token\"} 404 {\"error\": \"Page not found\"}","title":"Response"},{"location":"user_landing_page/#example-request","text":"Query Parameters: ```http GET /landing-page","title":"Example Request"},{"location":"user_logout/","text":"User Authentication Module 5. User Logout/Admin logout Description This endpoint allows users to log out of their session. It will invalidate their session or authentication token, depending on how the user is authenticated. Method: POST Endpoint : /logout Request Parameter Name Description Type Required token (Optional) User authentication token (if using token-based authentication) String No Response Status Code Description 200 {\"message\": \"User logged out successfully\"} 400 {\"error\": \"Invalid request or token\"} 401 {\"error\": \"Unauthorized access, please login\"} 500 {\"error\": \"Internal server error\"}","title":"User Logout"},{"location":"user_logout/#user-authentication-module","text":"","title":"User Authentication Module"},{"location":"user_logout/#5-user-logoutadmin-logout","text":"","title":"5. User Logout/Admin logout"},{"location":"user_logout/#description","text":"This endpoint allows users to log out of their session. It will invalidate their session or authentication token, depending on how the user is authenticated.","title":"Description"},{"location":"user_logout/#method-post","text":"Endpoint : /logout","title":"Method: POST"},{"location":"user_logout/#request","text":"Parameter Name Description Type Required token (Optional) User authentication token (if using token-based authentication) String No","title":"Request"},{"location":"user_logout/#response","text":"Status Code Description 200 {\"message\": \"User logged out successfully\"} 400 {\"error\": \"Invalid request or token\"} 401 {\"error\": \"Unauthorized access, please login\"} 500 {\"error\": \"Internal server error\"}","title":"Response"},{"location":"user_otp_verification/","text":"OTP Verification Module Description This endpoint allows users to verify their OTP (One-Time Password) for account activation or other secure actions like password reset. The OTP is typically sent to the user's registered email. Method: POST Endpoint : /otp-verification Request Parameter Name Description Type Length email User's registered email String Valid email otp One-Time Password sent to the user String 6 chars Response Status Code Description 200 {\"message\": \"OTP verified successfully\"} 400 {\"error\": \"Invalid OTP or email\"} 404 {\"error\": \"User not found\"} 500 {\"error\": \"Server error. Please try again later.\"} Example Request Headers: ```http Content-Type: application/json","title":"User otp Verification"},{"location":"user_otp_verification/#otp-verification-module","text":"","title":"OTP Verification Module"},{"location":"user_otp_verification/#description","text":"This endpoint allows users to verify their OTP (One-Time Password) for account activation or other secure actions like password reset. The OTP is typically sent to the user's registered email.","title":"Description"},{"location":"user_otp_verification/#method-post","text":"Endpoint : /otp-verification","title":"Method: POST"},{"location":"user_otp_verification/#request","text":"Parameter Name Description Type Length email User's registered email String Valid email otp One-Time Password sent to the user String 6 chars","title":"Request"},{"location":"user_otp_verification/#response","text":"Status Code Description 200 {\"message\": \"OTP verified successfully\"} 400 {\"error\": \"Invalid OTP or email\"} 404 {\"error\": \"User not found\"} 500 {\"error\": \"Server error. Please try again later.\"}","title":"Response"},{"location":"user_otp_verification/#example-request","text":"Headers: ```http Content-Type: application/json","title":"Example Request"},{"location":"user_products_details/","text":"Product Details Module 4. Product Details Description This endpoint retrieves detailed information about a specific product, including its description, price, availability, and other metadata. Method: GET Endpoint : /products/{product_id} Request Parameter Name Description Type Required product_id ID of the product to retrieve Integer Yes token (Optional) User authentication token String No Response Status Code Description 200 Returns detailed information about the product 404 {\"error\": \"Product not found\"} 401 {\"error\": \"Unauthorized access, invalid token\"}","title":"User Product Details"},{"location":"user_products_details/#product-details-module","text":"","title":"Product Details Module"},{"location":"user_products_details/#4-product-details","text":"","title":"4. Product Details"},{"location":"user_products_details/#description","text":"This endpoint retrieves detailed information about a specific product, including its description, price, availability, and other metadata.","title":"Description"},{"location":"user_products_details/#method-get","text":"Endpoint : /products/{product_id}","title":"Method: GET"},{"location":"user_products_details/#request","text":"Parameter Name Description Type Required product_id ID of the product to retrieve Integer Yes token (Optional) User authentication token String No","title":"Request"},{"location":"user_products_details/#response","text":"Status Code Description 200 Returns detailed information about the product 404 {\"error\": \"Product not found\"} 401 {\"error\": \"Unauthorized access, invalid token\"}","title":"Response"},{"location":"user_selling_request/","text":"User Product Selling Request Module 4. Request to Sell a Product Description This endpoint allows users to submit a request to sell a product. The request will be sent to the admin for review. Method: POST Endpoint : /sell-product/request Request Parameter Name Description Type Required product_name Name of the product String Yes category_id ID of the category the product belongs to Integer Yes price Selling price proposed by the user Float Yes description Description of the product String Yes location_id ID of the location where the product is Integer Yes images Product images File[] No token User authentication token String Yes Response Status Code Description 201 {\"message\": \"Selling request submitted successfully\"} 400 {\"error\": \"Invalid data provided\"} 401 {\"error\": \"Unauthorized access, invalid token\"}","title":"User Selling Request"},{"location":"user_selling_request/#user-product-selling-request-module","text":"","title":"User Product Selling Request Module"},{"location":"user_selling_request/#4-request-to-sell-a-product","text":"","title":"4. Request to Sell a Product"},{"location":"user_selling_request/#description","text":"This endpoint allows users to submit a request to sell a product. The request will be sent to the admin for review.","title":"Description"},{"location":"user_selling_request/#method-post","text":"Endpoint : /sell-product/request","title":"Method: POST"},{"location":"user_selling_request/#request","text":"Parameter Name Description Type Required product_name Name of the product String Yes category_id ID of the category the product belongs to Integer Yes price Selling price proposed by the user Float Yes description Description of the product String Yes location_id ID of the location where the product is Integer Yes images Product images File[] No token User authentication token String Yes","title":"Request"},{"location":"user_selling_request/#response","text":"Status Code Description 201 {\"message\": \"Selling request submitted successfully\"} 400 {\"error\": \"Invalid data provided\"} 401 {\"error\": \"Unauthorized access, invalid token\"}","title":"Response"},{"location":"user_signip_page/","text":"User Signin and OTP Verification Module 3. User Signin Description This endpoint allows users to sign in by providing their credentials. If the credentials are correct, the server returns an authentication token. Optionally, users may require OTP verification for added security. Method: POST Endpoint : /signin Request Parameter Name Description Type Length email User's registered email String Valid email password User's password String 6-20 chars Response Status Code Description 200 {\"message\": \"Signin successful\", \"token\": \"JWT_TOKEN\"} 401 {\"error\": \"Invalid email or password\"} 403 {\"error\": \"Account not verified. Please verify your OTP.\"} 500 {\"error\": \"Server error. Please try again later.\"} Example Request Headers: ```http Content-Type: application/json","title":"User Signin Page"},{"location":"user_signip_page/#user-signin-and-otp-verification-module","text":"","title":"User Signin and OTP Verification Module"},{"location":"user_signip_page/#3-user-signin","text":"","title":"3. User Signin"},{"location":"user_signip_page/#description","text":"This endpoint allows users to sign in by providing their credentials. If the credentials are correct, the server returns an authentication token. Optionally, users may require OTP verification for added security.","title":"Description"},{"location":"user_signip_page/#method-post","text":"Endpoint : /signin","title":"Method: POST"},{"location":"user_signip_page/#request","text":"Parameter Name Description Type Length email User's registered email String Valid email password User's password String 6-20 chars","title":"Request"},{"location":"user_signip_page/#response","text":"Status Code Description 200 {\"message\": \"Signin successful\", \"token\": \"JWT_TOKEN\"} 401 {\"error\": \"Invalid email or password\"} 403 {\"error\": \"Account not verified. Please verify your OTP.\"} 500 {\"error\": \"Server error. Please try again later.\"}","title":"Response"},{"location":"user_signip_page/#example-request","text":"Headers: ```http Content-Type: application/json","title":"Example Request"},{"location":"user_signup_page/","text":"User Signup Module 2. User Signup Description This endpoint allows a new user to sign up by providing necessary information such as username, email, and password. It registers the user in the system and can optionally send a verification email. Method: POST Endpoint : /signup Request Parameter Name Description Type Length username Username chosen by the user String 3-20 chars phone_number Email address of the user String Valid email password Password for the account String 6-20 chars confirm_password Confirmation of the chosen password String 6-20 chars first_name (Optional) User's first name String 1-50 chars last_name (Optional) User's last name String 1-50 chars Response Status Code Description 201 \"User successfully registered\" 400 {\"error\": \"Bad request. Please check your inputs.\"} 409 {\"error\": \"Email or username already exists\"} 422 {\"error\": \"Password and confirm password do not match\"} 500 {\"error\": \"Server error. Please try again later.\"} Example Request Headers: ```http Content-Type: application/json","title":"User Signup Page"},{"location":"user_signup_page/#user-signup-module","text":"","title":"User Signup Module"},{"location":"user_signup_page/#2-user-signup","text":"","title":"2. User Signup"},{"location":"user_signup_page/#description","text":"This endpoint allows a new user to sign up by providing necessary information such as username, email, and password. It registers the user in the system and can optionally send a verification email.","title":"Description"},{"location":"user_signup_page/#method-post","text":"Endpoint : /signup","title":"Method: POST"},{"location":"user_signup_page/#request","text":"Parameter Name Description Type Length username Username chosen by the user String 3-20 chars phone_number Email address of the user String Valid email password Password for the account String 6-20 chars confirm_password Confirmation of the chosen password String 6-20 chars first_name (Optional) User's first name String 1-50 chars last_name (Optional) User's last name String 1-50 chars","title":"Request"},{"location":"user_signup_page/#response","text":"Status Code Description 201 \"User successfully registered\" 400 {\"error\": \"Bad request. Please check your inputs.\"} 409 {\"error\": \"Email or username already exists\"} 422 {\"error\": \"Password and confirm password do not match\"} 500 {\"error\": \"Server error. Please try again later.\"}","title":"Response"},{"location":"user_signup_page/#example-request","text":"Headers: ```http Content-Type: application/json","title":"Example Request"},{"location":"user_to_seller/","text":"Module 9: Seller Application and Local Product Notification Purpose Enables users to sell products that are location-specific or inform the platform about unique products from their locality, ensuring the product's authenticity and cultural significance. Features Seller Application: Allow users to apply to sell products on the platform. Collect necessary details: Product name and description. Proof of the product's uniqueness (e.g., historical background, cultural significance). Images of the product. Contact details and location of the seller. Validate product authenticity using: Uploaded proof or historical records (e.g., certificates, documents). Verification by admins. Show application status (Pending, Approved, Rejected) in the user dashboard. Local Product Notification: Provide a form for users to notify about unique products available in their locality. Collect details like: Product name, description, and location. Historical or cultural background proving the product's uniqueness. Photos or documentation supporting the claim. Notify admins for review and verification. Admin Management: Admins can: Review seller applications and product notifications. Approve or reject products based on the provided proof. Communicate decisions to users with feedback. User Feedback: Notify users via email or notifications about the status of their application or submission. Allow users to track the progress of their application. Dependencies Django models for managing seller applications, product notifications, and proofs. File storage system for handling uploads of images and documents (e.g., local storage or cloud services like AWS S3). Admin panel for verifying and managing seller applications and product notifications. Email service for sending updates about application statuses. Frontend components for user-friendly forms and status tracking (e.g., Bootstrap, React).","title":"User To Seller"},{"location":"user_to_seller/#module-9-seller-application-and-local-product-notification","text":"","title":"Module 9: Seller Application and Local Product Notification"},{"location":"user_to_seller/#purpose","text":"Enables users to sell products that are location-specific or inform the platform about unique products from their locality, ensuring the product's authenticity and cultural significance.","title":"Purpose"},{"location":"user_to_seller/#features","text":"Seller Application: Allow users to apply to sell products on the platform. Collect necessary details: Product name and description. Proof of the product's uniqueness (e.g., historical background, cultural significance). Images of the product. Contact details and location of the seller. Validate product authenticity using: Uploaded proof or historical records (e.g., certificates, documents). Verification by admins. Show application status (Pending, Approved, Rejected) in the user dashboard. Local Product Notification: Provide a form for users to notify about unique products available in their locality. Collect details like: Product name, description, and location. Historical or cultural background proving the product's uniqueness. Photos or documentation supporting the claim. Notify admins for review and verification. Admin Management: Admins can: Review seller applications and product notifications. Approve or reject products based on the provided proof. Communicate decisions to users with feedback. User Feedback: Notify users via email or notifications about the status of their application or submission. Allow users to track the progress of their application.","title":"Features"},{"location":"user_to_seller/#dependencies","text":"Django models for managing seller applications, product notifications, and proofs. File storage system for handling uploads of images and documents (e.g., local storage or cloud services like AWS S3). Admin panel for verifying and managing seller applications and product notifications. Email service for sending updates about application statuses. Frontend components for user-friendly forms and status tracking (e.g., Bootstrap, React).","title":"Dependencies"},{"location":"user_wishlist/","text":"Wishlist Module Description This endpoint allows users to view a list of products they have added to their wishlist. Method: GET Endpoint : /wishlist Request Response Status Code Description 200 {\"message\": \"Wishlist fetched successfully\", \"data\": [wishlist items]} 401 {\"error\": \"Unauthorized. Please provide a valid token.\"} 500 {\"error\": \"Server error. Please try again later.\"}","title":"User Wishlist"},{"location":"user_wishlist/#wishlist-module","text":"","title":"Wishlist Module"},{"location":"user_wishlist/#description","text":"This endpoint allows users to view a list of products they have added to their wishlist.","title":"Description"},{"location":"user_wishlist/#method-get","text":"Endpoint : /wishlist","title":"Method: GET"},{"location":"user_wishlist/#request","text":"","title":"Request"},{"location":"user_wishlist/#response","text":"Status Code Description 200 {\"message\": \"Wishlist fetched successfully\", \"data\": [wishlist items]} 401 {\"error\": \"Unauthorized. Please provide a valid token.\"} 500 {\"error\": \"Server error. Please try again later.\"}","title":"Response"},{"location":"wish_list_delete/","text":"Delete Product from Wishlist Description This endpoint allows users to remove a specific product from their wishlist. Endpoint: DELETE /wishlist/{product_id} Method: DELETE Request Path Parameters: Parameter Name Description Type product_id Unique ID of the product in the wishlist Integer Response Status Code Description 200 {\"message\": \"Product successfully removed from wishlist\"} 404 {\"error\": \"Product not found in wishlist\"} 401 {\"error\": \"Unauthorized. Please provide a valid token.\"} 500 {\"error\": \"Server error. Please try again later.\"} Example Request","title":"User Wishlist Delete"},{"location":"wish_list_delete/#delete-product-from-wishlist","text":"","title":"Delete Product from Wishlist"},{"location":"wish_list_delete/#description","text":"This endpoint allows users to remove a specific product from their wishlist.","title":"Description"},{"location":"wish_list_delete/#endpoint-delete-wishlistproduct_id","text":"","title":"Endpoint: DELETE /wishlist/{product_id}"},{"location":"wish_list_delete/#method-delete","text":"","title":"Method: DELETE"},{"location":"wish_list_delete/#request","text":"Path Parameters: Parameter Name Description Type product_id Unique ID of the product in the wishlist Integer","title":"Request"},{"location":"wish_list_delete/#response","text":"Status Code Description 200 {\"message\": \"Product successfully removed from wishlist\"} 404 {\"error\": \"Product not found in wishlist\"} 401 {\"error\": \"Unauthorized. Please provide a valid token.\"} 500 {\"error\": \"Server error. Please try again later.\"}","title":"Response"},{"location":"wish_list_delete/#example-request","text":"","title":"Example Request"},{"location":"wishlist/","text":"Module 7: Wishlist Purpose Allows users to save products for future purchases, with options to move products between the wishlist and the shopping cart. Features Save products to the wishlist for later reference. Display wishlist items with: Product name, image, and price. Availability status (e.g., in stock or out of stock). Provide an option to move items to the shopping cart. Allow users to move products back to the wishlist from the shopping cart. Enable users to remove items from the wishlist. Highlight any discounts or price changes for products in the wishlist. Dependencies Django models for managing wishlist items linked to user accounts. Frontend components for displaying and interacting with wishlist items Backend logic for transferring products between wishlist and cart modules. Integration with the product details page and shopping cart module.","title":"Module 7: Wishlist"},{"location":"wishlist/#module-7-wishlist","text":"","title":"Module 7: Wishlist"},{"location":"wishlist/#purpose","text":"Allows users to save products for future purchases, with options to move products between the wishlist and the shopping cart.","title":"Purpose"},{"location":"wishlist/#features","text":"Save products to the wishlist for later reference. Display wishlist items with: Product name, image, and price. Availability status (e.g., in stock or out of stock). Provide an option to move items to the shopping cart. Allow users to move products back to the wishlist from the shopping cart. Enable users to remove items from the wishlist. Highlight any discounts or price changes for products in the wishlist.","title":"Features"},{"location":"wishlist/#dependencies","text":"Django models for managing wishlist items linked to user accounts. Frontend components for displaying and interacting with wishlist items Backend logic for transferring products between wishlist and cart modules. Integration with the product details page and shopping cart module.","title":"Dependencies"}]}